using Malware_FYPJ.Entity;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;
using System.Xml.Linq;

namespace Malware_FYPJ.page
{
    public partial class analysis : System.Web.UI.Page
    {
        String md5 = "";
        string path = "";
        XmlDocument stix = new XmlDocument();
        XmlNamespaceManager npm;
        XmlNode node;
        XmlNodeList nodeList;
        XmlAttribute attribute;
        String[] attributeValue;
        int process_page = 0;

        List<Overview> overviewList;
        List<Section> sectionList;
        List<Import> importList;
        List<Process> processList;
        List<Network> networkList;
        List<File> fileList;
        List<Artifact> artifactList;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (Request.QueryString["md5"] != null)
            {
                md5 = Request.QueryString["md5"];
            }
            else
            {
                Response.Redirect("view.aspx");
            }

            if (IsPostBack)
            {
                overviewList = (List<Overview>)Session["overviewList"];
                sectionList = (List<Section>)Session["sectionList"];
                importList = (List<Import>)Session["importList"];
                processList = (List<Process>)Session["processList"];
                networkList = (List<Network>)Session["networkList"];
                fileList = (List<File>)Session["fileList"];
                artifactList = (List<Artifact>)Session["artifactList"];
                npm = (XmlNamespaceManager)Session["npm"];
                stix = (XmlDocument)Session["stix"];
                path = (string)Session["path"];
                if (Session["process_page"] != null)
                {
                    process_page = (int)Session["process_page"];
                }
                else
                {
                    process_page = 0;
                }
            }
            else
            {
                Session.Add("process_page", process_page);
                loadSTIXReport();
            }
        }

        protected void loadSTIXReport()
        {
            try
            {
                path = "c://Repository/Report/Raw_Cuckoo/" + md5 + "/reports/report.stix.xml";
                Session.Add("path", path);

                stix.Load(path);
                Session.Add("stix", stix);

                npm = new XmlNamespaceManager(stix.NameTable);
                /*
                npm.AddNamespace("stix", "http://stix.mitre.org/stix-1");
                npm.AddNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                npm.AddNamespace("cybox", "http://cybox.mitre.org/cybox-2");
                npm.AddNamespace("cyboxCommon", "http://cybox.mitre.org/common-2");
                npm.AddNamespace("ArtifactObj", "http://cybox.mitre.org/objects#ArtifactObject-2");
                npm.AddNamespace("indicator", "http://stix.mitre.org/Indicator-2");
                npm.AddNamespace("WinProcessObj", "http://cybox.mitre.org/objects#WinProcessObject-2");
                npm.AddNamespace("ProcessObj", "http://cybox.mitre.org/objects#ProcessObject-2");
                npm.AddNamespace("FileObj", "http://cybox.mitre.org/objects#FileObject-2");
                npm.AddNamespace("WinExecutableFileObj", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
                npm.AddNamespace("stixCommon", "http://stix.mitre.org/common-1");
                npm.AddNamespace("NetworkConnectionObj", "http://cybox.mitre.org/objects#NetworkConnectionObject-2");
                npm.AddNamespace("SocketAddressObj", "http://cybox.mitre.org/objects#SocketAddressObject-1");
                */

                npm.AddNamespace("CodeObj", "http://cybox.mitre.org/objects#CodeObject-2");
                npm.AddNamespace("ioc-tr", "http://schemas.mandiant.com/2010/ioc/TR/");
                npm.AddNamespace("GUIObj", "http://cybox.mitre.org/objects#GUIObject-2");
                npm.AddNamespace("ioc", "http://schemas.mandiant.com/2010/ioc");
                npm.AddNamespace("WinNetworkRouteEntryObj", "http://cybox.mitre.org/objects#WinNetworkRouteEntryObject-2");
                npm.AddNamespace("WinDriverObj", "http://cybox.mitre.org/objects#WinDriverObject-2");
                npm.AddNamespace("PDFFileObj", "http://cybox.mitre.org/objects#PDFFileObject-1");
                npm.AddNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                npm.AddNamespace("DiskObj", "http://cybox.mitre.org/objects#DiskObject-2");
                npm.AddNamespace("UserAccountObj", "http://cybox.mitre.org/objects#UserAccountObject-2");
                npm.AddNamespace("CustomObj", "http://cybox.mitre.org/objects#CustomObject-1");
                npm.AddNamespace("coa", "http://stix.mitre.org/CourseOfAction-1");
                npm.AddNamespace("AddressObj", "http://cybox.mitre.org/objects#AddressObject-2");
                npm.AddNamespace("UserSessionObj", "http://cybox.mitre.org/objects#UserSessionObject-2");
                npm.AddNamespace("cvrf", "http://www.icasi.org/CVRF/schema/cvrf/1.1");
                npm.AddNamespace("WinPipeObj", "http://cybox.mitre.org/objects#WinPipeObject-2");
                npm.AddNamespace("ArtifactObj", "http://cybox.mitre.org/objects#ArtifactObject-2");
                npm.AddNamespace("PacketObj", "http://cybox.mitre.org/objects#PacketObject-2");
                npm.AddNamespace("incident", "http://stix.mitre.org/Incident-1");
                npm.AddNamespace("HTTPSessionObj", "http://cybox.mitre.org/objects#HTTPSessionObject-2");
                npm.AddNamespace("WinCriticalSectionObj", "http://cybox.mitre.org/objects#WinCriticalSectionObject-2");
                npm.AddNamespace("DeviceObj", "http://cybox.mitre.org/objects#DeviceObject-2");
                npm.AddNamespace("WinVolumeObj", "http://cybox.mitre.org/objects#WinVolumeObject-2");
                npm.AddNamespace("UnixProcessObj", "http://cybox.mitre.org/objects#UnixProcessObject-2");
                npm.AddNamespace("MutexObj", "http://cybox.mitre.org/objects#MutexObject-2");
                npm.AddNamespace("scap-core", "http://scap.nist.gov/schema/scap-core/1.0");
                npm.AddNamespace("WinSystemRestoreObj", "http://cybox.mitre.org/objects#WinSystemRestoreObject-2");
                npm.AddNamespace("WinMailslotObj", "http://cybox.mitre.org/objects#WinMailslotObject-2");
                npm.AddNamespace("WinFileObj", "http://cybox.mitre.org/objects#WinFileObject-2");
                npm.AddNamespace("DiskPartitionObj", "http://cybox.mitre.org/objects#DiskPartitionObject-2");
                npm.AddNamespace("ciq", "urn:oasis:names:tc:ciq:xpil:3");
                npm.AddNamespace("WinSystemObj", "http://cybox.mitre.org/objects#WinSystemObject-2");
                npm.AddNamespace("PipeObj", "http://cybox.mitre.org/objects#PipeObject-2");
                npm.AddNamespace("ttp", "http://stix.mitre.org/TTP-1");
                npm.AddNamespace("UnixUserAccountObj", "http://cybox.mitre.org/objects#UnixUserAccountObject-2");
                npm.AddNamespace("WinMemoryPageRegionObj", "http://cybox.mitre.org/objects#WinMemoryPageRegionObject-2");
                npm.AddNamespace("NetworkSubnetObj", "http://cybox.mitre.org/objects#NetworkSubnetObject-2");
                npm.AddNamespace("UnixPipeObj", "http://cybox.mitre.org/objects#UnixPipeObject-2");
                npm.AddNamespace("WinProcessObj", "http://cybox.mitre.org/objects#WinProcessObject-2");
                npm.AddNamespace("ciqAddress", "http://stix.mitre.org/extensions/Address#CIQAddress3.0-1");
                npm.AddNamespace("SemaphoreObj", "http://cybox.mitre.org/objects#SemaphoreObject-2");
                npm.AddNamespace("cvrfVuln", "http://stix.mitre.org/extensions/Vulnerability#CVRF-1");
                npm.AddNamespace("WinEventObj", "http://cybox.mitre.org/objects#WinEventObject-2");
                npm.AddNamespace("EmailMessageObj", "http://cybox.mitre.org/objects#EmailMessageObject-2");
                npm.AddNamespace("WinWaitableTimerObj", "http://cybox.mitre.org/objects#WinWaitableTimerObject-2");
                npm.AddNamespace("WhoisObj", "http://cybox.mitre.org/objects#WhoisObject-2");
                npm.AddNamespace("ProcessObj", "http://cybox.mitre.org/objects#ProcessObject-2");
                npm.AddNamespace("capec", "http://capec.mitre.org/capec-2");
                npm.AddNamespace("capecInstance", "http://stix.mitre.org/extensions/AP#CAPEC2.6-1");
                npm.AddNamespace("genericTM", "http://stix.mitre.org/extensions/TestMechanism#Generic-1");
                npm.AddNamespace("oval", "http://oval.mitre.org/XMLSchema/oval-common-5");
                npm.AddNamespace("WinSemaphoreObj", "http://cybox.mitre.org/objects#WinSemaphoreObject-2");
                npm.AddNamespace("NetworkRouteEntryObj", "http://cybox.mitre.org/objects#NetworkRouteEntryObject-2");
                npm.AddNamespace("stixVocabs", "http://stix.mitre.org/default_vocabularies-1");
                npm.AddNamespace("VolumeObj", "http://cybox.mitre.org/objects#VolumeObject-2");
                npm.AddNamespace("DNSQueryObj", "http://cybox.mitre.org/objects#DNSQueryObject-2");
                npm.AddNamespace("ds", "http://www.w3.org/2000/09/xmldsig#");
                npm.AddNamespace("WinUserAccountObj", "http://cybox.mitre.org/objects#WinUserAccountObject-2");
                npm.AddNamespace("campaign", "http://stix.mitre.org/Campaign-1");
                npm.AddNamespace("snortTM", "http://stix.mitre.org/extensions/TestMechanism#Snort-1");
                npm.AddNamespace("xs", "http://www.w3.org/2001/XMLSchema");
                npm.AddNamespace("PortObj", "http://cybox.mitre.org/objects#PortObject-2");
                npm.AddNamespace("UnixVolumeObj", "http://cybox.mitre.org/objects#UnixVolumeObject-2");
                npm.AddNamespace("maec", "http://maec.mitre.org/XMLSchema/maec-package-2");
                npm.AddNamespace("NetworkSocketObj", "http://cybox.mitre.org/objects#NetworkSocketObject-2");
                npm.AddNamespace("GUIDialogBoxObj", "http://cybox.mitre.org/objects#GUIDialogboxObject-2");
                npm.AddNamespace("LibraryObj", "http://cybox.mitre.org/objects#LibraryObject-2");
                npm.AddNamespace("WinThreadObj", "http://cybox.mitre.org/objects#WinThreadObject-2");
                npm.AddNamespace("cvrf-common", "http://www.icasi.org/CVRF/schema/common/1.1");
                npm.AddNamespace("NetworkConnectionObj", "http://cybox.mitre.org/objects#NetworkConnectionObject-2");
                npm.AddNamespace("ovalTM", "http://stix.mitre.org/extensions/TestMechanism#OVAL5.10-1");
                npm.AddNamespace("tlpMarking", "http://data-marking.mitre.org/extensions/MarkingStructure#TLP-1");
                npm.AddNamespace("WinKernelHookObj", "http://cybox.mitre.org/objects#WinKernelHookObject-2");
                npm.AddNamespace("WinComputerAccountObj", "http://cybox.mitre.org/objects#WinComputerAccountObject-2");
                npm.AddNamespace("dc", "http://purl.org/dc/elements/1.1/");
                npm.AddNamespace("LinuxPackageObj", "http://cybox.mitre.org/objects#LinuxPackageObject-2");
                npm.AddNamespace("sch", "http://purl.oclc.org/dsdl/schematron");
                npm.AddNamespace("yaraTM", "http://stix.mitre.org/extensions/TestMechanism#YARA-1");
                npm.AddNamespace("prod", "http://www.icasi.org/CVRF/schema/prod/1.1");
                npm.AddNamespace("DNSCacheObj", "http://cybox.mitre.org/objects#DNSCacheObject-2");
                npm.AddNamespace("UnixFileObj", "http://cybox.mitre.org/objects#UnixFileObject-2");
                npm.AddNamespace("NetFlowObj", "http://cybox.mitre.org/objects#NetworkFlowObject-2");
                npm.AddNamespace("cyboxVocabs", "http://cybox.mitre.org/default_vocabularies-2");
                npm.AddNamespace("openiocTM", "http://stix.mitre.org/extensions/TestMechanism#OpenIOC2010-1");
                npm.AddNamespace("WinRegistryKeyObj", "http://cybox.mitre.org/objects#WinRegistryKeyObject-2");
                npm.AddNamespace("ProductObj", "http://cybox.mitre.org/objects#ProductObject-2");
                npm.AddNamespace("WinHandleObj", "http://cybox.mitre.org/objects#WinHandleObject-2");
                npm.AddNamespace("oval-var", "http://oval.mitre.org/XMLSchema/oval-variables-5");
                npm.AddNamespace("a", "urn:oasis:names:tc:ciq:xal:3");
                npm.AddNamespace("cvssv2", "http://scap.nist.gov/schema/cvss-v2/1.0");
                npm.AddNamespace("WinEventLogObj", "http://cybox.mitre.org/objects#WinEventLogObject-2");
                npm.AddNamespace("vuln", "http://www.icasi.org/CVRF/schema/vuln/1.1");
                npm.AddNamespace("simpleMarking", "http://data-marking.mitre.org/extensions/MarkingStructure#Simple-1");
                npm.AddNamespace("APIObj", "http://cybox.mitre.org/objects#APIObject-2");
                npm.AddNamespace("genericStructuredCOA", "http://stix.mitre.org/extensions/StructuredCOA#Generic-1");
                npm.AddNamespace("ct", "urn:oasis:names:tc:ciq:ct:3");
                npm.AddNamespace("SystemObj", "http://cybox.mitre.org/objects#SystemObject-2");
                npm.AddNamespace("DNSRecordObj", "http://cybox.mitre.org/objects#DNSRecordObject-2");
                npm.AddNamespace("stixCommon", "http://stix.mitre.org/common-1");
                npm.AddNamespace("WinServiceObj", "http://cybox.mitre.org/objects#WinServiceObject-2");
                npm.AddNamespace("cyboxCommon", "http://cybox.mitre.org/common-2");
                npm.AddNamespace("cpe", "http://cpe.mitre.org/language/2.0");
                npm.AddNamespace("FileObj", "http://cybox.mitre.org/objects#FileObject-2");
                npm.AddNamespace("GUIWindowObj", "http://cybox.mitre.org/objects#GUIWindowObject-2");
                npm.AddNamespace("WinPrefetchObj", "http://cybox.mitre.org/objects#WinPrefetchObject-2");
                npm.AddNamespace("WinKernelObj", "http://cybox.mitre.org/objects#WinKernelObject-2");
                npm.AddNamespace("stix", "http://stix.mitre.org/stix-1");
                npm.AddNamespace("cybox", "http://cybox.mitre.org/cybox-2");
                npm.AddNamespace("indicator", "http://stix.mitre.org/Indicator-2");
                npm.AddNamespace("marking", "http://data-marking.mitre.org/Marking-1");
                npm.AddNamespace("URIObj", "http://cybox.mitre.org/objects#URIObject-2");
                npm.AddNamespace("ta", "http://stix.mitre.org/ThreatActor-1");
                npm.AddNamespace("MemoryObj", "http://cybox.mitre.org/objects#MemoryObject-2");
                npm.AddNamespace("WinTaskObj", "http://cybox.mitre.org/objects#WinTaskObject-2");
                npm.AddNamespace("SocketAddressObj", "http://cybox.mitre.org/objects#SocketAddressObject-1");
                npm.AddNamespace("WinMutexObj", "http://cybox.mitre.org/objects#WinMutexObject-2");
                npm.AddNamespace("et", "http://stix.mitre.org/ExploitTarget-1");
                npm.AddNamespace("WinExecutableFileObj", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
                npm.AddNamespace("WinNetworkShareObj", "http://cybox.mitre.org/objects#WinNetworkShareObject-2");
                npm.AddNamespace("LinkObj", "http://cybox.mitre.org/objects#LinkObject-1");
                npm.AddNamespace("NetworkRouteObj", "http://cybox.mitre.org/objects#NetworkRouteObject-2");
                npm.AddNamespace("xnl", "urn:oasis:names:tc:ciq:xnl:3");
                npm.AddNamespace("X509CertificateObj", "http://cybox.mitre.org/objects#X509CertificateObject-2");
                npm.AddNamespace("maecInstance", "http://stix.mitre.org/extensions/Malware#MAEC4.0-1");
                npm.AddNamespace("UnixNetworkRouteEntryObj", "http://cybox.mitre.org/objects#UnixNetworkRouteEntryObject-2");
                npm.AddNamespace("oval-def", "http://oval.mitre.org/XMLSchema/oval-definitions-5");
                npm.AddNamespace("ciqIdentity", "http://stix.mitre.org/extensions/Identity#CIQIdentity3.0-1");
                npm.AddNamespace("AccountObj", "http://cybox.mitre.org/objects#AccountObject-2");
                npm.AddNamespace("xlink", "http://www.w3.org/1999/xlink");
                // xmlns:CodeObj="http://cybox.mitre.org/objects#CodeObject-2" xmlns:ioc-tr="http://schemas.mandiant.com/2010/ioc/TR/" xmlns:GUIObj="http://cybox.mitre.org/objects#GUIObject-2" xmlns:ioc="http://schemas.mandiant.com/2010/ioc" xmlns:WinNetworkRouteEntryObj="http://cybox.mitre.org/objects#WinNetworkRouteEntryObject-2" xmlns:WinDriverObj="http://cybox.mitre.org/objects#WinDriverObject-2" xmlns:PDFFileObj="http://cybox.mitre.org/objects#PDFFileObject-1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:DiskObj="http://cybox.mitre.org/objects#DiskObject-2" xmlns:UserAccountObj="http://cybox.mitre.org/objects#UserAccountObject-2" xmlns:CustomObj="http://cybox.mitre.org/objects#CustomObject-1" xmlns:coa="http://stix.mitre.org/CourseOfAction-1" xmlns:AddressObj="http://cybox.mitre.org/objects#AddressObject-2" xmlns:UserSessionObj="http://cybox.mitre.org/objects#UserSessionObject-2" xmlns:cvrf="http://www.icasi.org/CVRF/schema/cvrf/1.1" xmlns:WinPipeObj="http://cybox.mitre.org/objects#WinPipeObject-2" xmlns:ArtifactObj="http://cybox.mitre.org/objects#ArtifactObject-2" xmlns:PacketObj="http://cybox.mitre.org/objects#PacketObject-2" xmlns:incident="http://stix.mitre.org/Incident-1" xmlns:HTTPSessionObj="http://cybox.mitre.org/objects#HTTPSessionObject-2" xmlns:WinCriticalSectionObj="http://cybox.mitre.org/objects#WinCriticalSectionObject-2" xmlns:DeviceObj="http://cybox.mitre.org/objects#DeviceObject-2" xmlns:WinVolumeObj="http://cybox.mitre.org/objects#WinVolumeObject-2" xmlns:UnixProcessObj="http://cybox.mitre.org/objects#UnixProcessObject-2" xmlns:MutexObj="http://cybox.mitre.org/objects#MutexObject-2" xmlns:scap-core="http://scap.nist.gov/schema/scap-core/1.0" xmlns:WinSystemRestoreObj="http://cybox.mitre.org/objects#WinSystemRestoreObject-2" xmlns:WinMailslotObj="http://cybox.mitre.org/objects#WinMailslotObject-2" xmlns:WinFileObj="http://cybox.mitre.org/objects#WinFileObject-2" xmlns:DiskPartitionObj="http://cybox.mitre.org/objects#DiskPartitionObject-2" xmlns:ciq="urn:oasis:names:tc:ciq:xpil:3" xmlns:WinSystemObj="http://cybox.mitre.org/objects#WinSystemObject-2" xmlns:PipeObj="http://cybox.mitre.org/objects#PipeObject-2" xmlns:ttp="http://stix.mitre.org/TTP-1" xmlns:UnixUserAccountObj="http://cybox.mitre.org/objects#UnixUserAccountObject-2" xmlns:WinMemoryPageRegionObj="http://cybox.mitre.org/objects#WinMemoryPageRegionObject-2" xmlns:NetworkSubnetObj="http://cybox.mitre.org/objects#NetworkSubnetObject-2" xmlns:UnixPipeObj="http://cybox.mitre.org/objects#UnixPipeObject-2" xmlns:WinProcessObj="http://cybox.mitre.org/objects#WinProcessObject-2" xmlns:ciqAddress="http://stix.mitre.org/extensions/Address#CIQAddress3.0-1" xmlns:SemaphoreObj="http://cybox.mitre.org/objects#SemaphoreObject-2" xmlns:cvrfVuln="http://stix.mitre.org/extensions/Vulnerability#CVRF-1" xmlns:WinEventObj="http://cybox.mitre.org/objects#WinEventObject-2" xmlns:EmailMessageObj="http://cybox.mitre.org/objects#EmailMessageObject-2" xmlns:WinWaitableTimerObj="http://cybox.mitre.org/objects#WinWaitableTimerObject-2" xmlns:WhoisObj="http://cybox.mitre.org/objects#WhoisObject-2" xmlns:ProcessObj="http://cybox.mitre.org/objects#ProcessObject-2" xmlns:capec="http://capec.mitre.org/capec-2" xmlns:capecInstance="http://stix.mitre.org/extensions/AP#CAPEC2.6-1" xmlns:genericTM="http://stix.mitre.org/extensions/TestMechanism#Generic-1" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:WinSemaphoreObj="http://cybox.mitre.org/objects#WinSemaphoreObject-2" xmlns:NetworkRouteEntryObj="http://cybox.mitre.org/objects#NetworkRouteEntryObject-2" xmlns:stixVocabs="http://stix.mitre.org/default_vocabularies-1" xmlns:VolumeObj="http://cybox.mitre.org/objects#VolumeObject-2" xmlns:DNSQueryObj="http://cybox.mitre.org/objects#DNSQueryObject-2" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:WinUserAccountObj="http://cybox.mitre.org/objects#WinUserAccountObject-2" xmlns:campaign="http://stix.mitre.org/Campaign-1" xmlns:snortTM="http://stix.mitre.org/extensions/TestMechanism#Snort-1" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:PortObj="http://cybox.mitre.org/objects#PortObject-2" xmlns:UnixVolumeObj="http://cybox.mitre.org/objects#UnixVolumeObject-2" xmlns:maec="http://maec.mitre.org/XMLSchema/maec-package-2" xmlns:NetworkSocketObj="http://cybox.mitre.org/objects#NetworkSocketObject-2" xmlns:GUIDialogBoxObj="http://cybox.mitre.org/objects#GUIDialogboxObject-2" xmlns:LibraryObj="http://cybox.mitre.org/objects#LibraryObject-2" xmlns:WinThreadObj="http://cybox.mitre.org/objects#WinThreadObject-2" xmlns:cvrf-common="http://www.icasi.org/CVRF/schema/common/1.1" xmlns:NetworkConnectionObj="http://cybox.mitre.org/objects#NetworkConnectionObject-2" xmlns:ovalTM="http://stix.mitre.org/extensions/TestMechanism#OVAL5.10-1" xmlns:tlpMarking="http://data-marking.mitre.org/extensions/MarkingStructure#TLP-1" xmlns:WinKernelHookObj="http://cybox.mitre.org/objects#WinKernelHookObject-2" xmlns:WinComputerAccountObj="http://cybox.mitre.org/objects#WinComputerAccountObject-2" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:LinuxPackageObj="http://cybox.mitre.org/objects#LinuxPackageObject-2" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:yaraTM="http://stix.mitre.org/extensions/TestMechanism#YARA-1" xmlns:prod="http://www.icasi.org/CVRF/schema/prod/1.1" xmlns:DNSCacheObj="http://cybox.mitre.org/objects#DNSCacheObject-2" xmlns:UnixFileObj="http://cybox.mitre.org/objects#UnixFileObject-2" xmlns:NetFlowObj="http://cybox.mitre.org/objects#NetworkFlowObject-2" xmlns:cyboxVocabs="http://cybox.mitre.org/default_vocabularies-2" xmlns:openiocTM="http://stix.mitre.org/extensions/TestMechanism#OpenIOC2010-1" xmlns:WinRegistryKeyObj="http://cybox.mitre.org/objects#WinRegistryKeyObject-2" xmlns:ProductObj="http://cybox.mitre.org/objects#ProductObject-2" xmlns:WinHandleObj="http://cybox.mitre.org/objects#WinHandleObject-2" xmlns:oval-var="http://oval.mitre.org/XMLSchema/oval-variables-5" xmlns:a="urn:oasis:names:tc:ciq:xal:3" xmlns:cvssv2="http://scap.nist.gov/schema/cvss-v2/1.0" xmlns:WinEventLogObj="http://cybox.mitre.org/objects#WinEventLogObject-2" xmlns:vuln="http://www.icasi.org/CVRF/schema/vuln/1.1" xmlns:simpleMarking="http://data-marking.mitre.org/extensions/MarkingStructure#Simple-1" xmlns:APIObj="http://cybox.mitre.org/objects#APIObject-2" xmlns:genericStructuredCOA="http://stix.mitre.org/extensions/StructuredCOA#Generic-1" xmlns:ct="urn:oasis:names:tc:ciq:ct:3" xmlns:SystemObj="http://cybox.mitre.org/objects#SystemObject-2" xmlns:DNSRecordObj="http://cybox.mitre.org/objects#DNSRecordObject-2" xmlns:stixCommon="http://stix.mitre.org/common-1" xmlns:WinServiceObj="http://cybox.mitre.org/objects#WinServiceObject-2" xmlns:cyboxCommon="http://cybox.mitre.org/common-2" xmlns:cpe="http://cpe.mitre.org/language/2.0" xmlns:FileObj="http://cybox.mitre.org/objects#FileObject-2" xmlns:GUIWindowObj="http://cybox.mitre.org/objects#GUIWindowObject-2" xmlns:WinPrefetchObj="http://cybox.mitre.org/objects#WinPrefetchObject-2" xmlns:WinKernelObj="http://cybox.mitre.org/objects#WinKernelObject-2" xmlns:stix="http://stix.mitre.org/stix-1" xmlns:cybox="http://cybox.mitre.org/cybox-2" xmlns:indicator="http://stix.mitre.org/Indicator-2" xmlns:marking="http://data-marking.mitre.org/Marking-1" xmlns:URIObj="http://cybox.mitre.org/objects#URIObject-2" xmlns:ta="http://stix.mitre.org/ThreatActor-1" xmlns:MemoryObj="http://cybox.mitre.org/objects#MemoryObject-2" xmlns:WinTaskObj="http://cybox.mitre.org/objects#WinTaskObject-2" xmlns:SocketAddressObj="http://cybox.mitre.org/objects#SocketAddressObject-1" xmlns:WinMutexObj="http://cybox.mitre.org/objects#WinMutexObject-2" xmlns:et="http://stix.mitre.org/ExploitTarget-1" xmlns:WinExecutableFileObj="http://cybox.mitre.org/objects#WinExecutableFileObject-2" xmlns:WinNetworkShareObj="http://cybox.mitre.org/objects#WinNetworkShareObject-2" xmlns:LinkObj="http://cybox.mitre.org/objects#LinkObject-1" xmlns:NetworkRouteObj="http://cybox.mitre.org/objects#NetworkRouteObject-2" xmlns:xnl="urn:oasis:names:tc:ciq:xnl:3" xmlns:X509CertificateObj="http://cybox.mitre.org/objects#X509CertificateObject-2" xmlns:maecInstance="http://stix.mitre.org/extensions/Malware#MAEC4.0-1" xmlns:UnixNetworkRouteEntryObj="http://cybox.mitre.org/objects#UnixNetworkRouteEntryObject-2" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:ciqIdentity="http://stix.mitre.org/extensions/Identity#CIQIdentity3.0-1" xmlns:AccountObj="http://cybox.mitre.org/objects#AccountObject-2" xmlns:xlink="http://www.w3.org/1999/xlink"

                Session.Add("npm", npm);

                loadFields();
            }
            catch (DirectoryNotFoundException e)
            {
                lbl_e.Text = "Report is still being processed";
                lbl_e.Visible = true;
                Panel1.Visible = false;
            }
        }

        protected void loadFields()
        {
            /********** OVERVIEW **********/
            overviewList = new List<Overview>();
            Overview o = new Overview();
            if (stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source/@lastusermod", npm) != null)
            {
                attributeValue = Regex.Split(stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source/@lastusermod", npm).Value, "::");
                o.ModType = int.Parse(attributeValue[0]);
                o.UserId = attributeValue[1];
                o.ModDateTime = DateTime.Parse(attributeValue[2]);
            }
            node = stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source/stixCommon:Time/cyboxCommon:Start_Time", npm);
            o.Started = node.InnerText;
            node = stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source/stixCommon:Time/cyboxCommon:End_Time", npm);
            o.Completed = node.InnerText;

            DateTime start = DateTime.Parse(o.Started);
            DateTime end = DateTime.Parse(o.Completed);
            o.Duration = end.Subtract(start).TotalSeconds.ToString();

            overviewList.Add(o);

            Session.Add("overviewList", overviewList);
            OverviewListView.DataSource = overviewList;
            OverviewListView.DataBind();

            /********** STATIC - SECTION **********/
            nodeList = stix.SelectNodes(".//WinExecutableFileObj:Section", npm);
            sectionList = new List<Section>();

            for (int i = 0; i < nodeList.Count; i++)
            {
                XmlNode sectionNode = nodeList[i];
                Section s = new Section();
                if (sectionNode.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(sectionNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    s.ModType = int.Parse(attributeValue[0]);
                    s.UserId = attributeValue[1];
                    s.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                /*
                try
                {
                    attributeValue = Regex.Split(sectionNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    s.ModType = int.Parse(attributeValue[0]);
                    s.UserId = attributeValue[1];
                    s.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                catch (NullReferenceException e)
                { }
                 * */
                node = sectionNode.SelectSingleNode(".//WinExecutableFileObj:Name", npm);
                s.Name = node.InnerText;
                node = sectionNode.SelectSingleNode(".//WinExecutableFileObj:Virtual_Address", npm);
                s.VirtualAdd = node.InnerText;
                node = sectionNode.SelectSingleNode(".//WinExecutableFileObj:Virtual_Size", npm);
                s.VirtualSize = node.InnerText;
                node = sectionNode.SelectSingleNode(".//WinExecutableFileObj:Entropy/WinExecutableFileObj:Value", npm);
                s.Entropy = node.InnerText;
                sectionList.Add(s);
            }

            Session.Add("sectionList", sectionList);
            SectionListView.DataSource = sectionList;
            SectionListView.DataBind();

            /********** STATIC - IMPORT **********/
            nodeList = stix.SelectNodes(".//WinExecutableFileObj:Import", npm);
            importList = new List<Import>();

            foreach (XmlNode importNode in nodeList)
            {
                Import i = new Import();
                if (importNode.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(importNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    i.ModType = int.Parse(attributeValue[0]);
                    i.UserId = attributeValue[1];
                    i.ModDateTime = DateTime.Parse(attributeValue[2]);
                }

                node = importNode.SelectSingleNode(".//WinExecutableFileObj:File_Name", npm);
                i.Filename = node.InnerText;
                XmlNodeList functionNodeList = importNode.SelectNodes(".//WinExecutableFileObj:Imported_Function", npm);
                List<Function> functionList = new List<Function>();
                foreach (XmlNode childNode in functionNodeList)
                {
                    Function f = new Function();

                    if (childNode.SelectSingleNode("./@lastusermod", npm) != null)
                    {
                        f.ModType = int.Parse(attributeValue[0]);
                        f.UserId = attributeValue[1];
                        f.ModDateTime = DateTime.Parse(attributeValue[2]);
                    }

                    node = childNode.SelectSingleNode(".//WinExecutableFileObj:Function_Name", npm);
                    if (node != null)
                    {
                        f.FunctionName = node.InnerText;
                    }
                    node = childNode.SelectSingleNode(".//WinExecutableFileObj:Virtual_Address", npm);
                    if (node != null)
                    {
                        f.VirtualAddress = node.InnerText;
                    }
                    functionList.Add(f);
                }
                i.Function = functionList;

                importList.Add(i);
            }

            Session.Add("importList", importList);
            ImportListView.DataSource = importList;
            ImportListView.DataBind();

            /********** BEHAVIOUR - PROCESS **********/
            nodeList = stix.SelectNodes(".//WinProcessObj:Windows_Process", npm);
            processList = new List<Process>();

            foreach (XmlNode processNode in nodeList)
            {
                Process p = new Process();
                if (processNode.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(processNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    p.ModType = int.Parse(attributeValue[0]);
                    p.UserId = attributeValue[1];
                    p.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                node = processNode.SelectSingleNode(".//ProcessObj:Name", npm);
                p.Name = node.InnerText;
                node = processNode.SelectSingleNode(".//ProcessObj:Status", npm);
                p.Status = node.InnerText;
                node = processNode.SelectSingleNode(".//ProcessObj:Creation_Time", npm);
                p.CreationTime = node.InnerText;
                XmlNodeList argNodeList = processNode.SelectNodes(".//cyboxCommon:Environment_Variable", npm);
                List<Argument> argList = new List<Argument>();
                foreach (XmlNode childNode in argNodeList)
                {
                    Argument a = new Argument();
                    if (childNode.SelectSingleNode("./@lastusermod", npm) != null)
                    {
                        attributeValue = Regex.Split(childNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                        a.ModType = int.Parse(attributeValue[0]);
                        a.UserId = attributeValue[1];
                        a.ModDateTime = DateTime.Parse(attributeValue[2]);
                    }
                    node = childNode.SelectSingleNode(".//cyboxCommon:Name", npm);
                    a.Name = node.InnerText;
                    node = childNode.SelectSingleNode(".//cyboxCommon:Value", npm);
                    a.Val = node.InnerText;
                    argList.Add(a);
                }
                p.Arg = argList;

            processList.Add(p);
            }

            Session.Add("processList", processList);
            ProcessListView.DataSource = processList;
            ProcessListView.DataBind();

            /********** NETWORK - IP TRAFFIC **********/
            nodeList = stix.SelectNodes(".//NetworkConnectionObj:Network_Connection", npm);
            networkList = new List<Network>();

            for (int i = 0; i < nodeList.Count; i++)
            {
                XmlNode networkNode = nodeList[i];
                Network n = new Network();
                if (networkNode.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(networkNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    n.ModType = int.Parse(attributeValue[0]);
                    n.UserId = attributeValue[1];
                    n.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                node = networkNode.SelectSingleNode(".//NetworkConnectionObj:Source_Socket_Address/SocketAddressObj:IP_Address", npm);
                n.SourceIP = node.InnerText;
                node = networkNode.SelectSingleNode(".//NetworkConnectionObj:Source_Socket_Address/SocketAddressObj:Port", npm);
                n.SourcePort = node.InnerText;
                node = networkNode.SelectSingleNode(".//NetworkConnectionObj:Destination_Socket_Address/SocketAddressObj:IP_Address", npm);
                n.DestinationIP = node.InnerText;
                node = networkNode.SelectSingleNode(".//NetworkConnectionObj:Destination_Socket_Address/SocketAddressObj:Port", npm);
                n.DestinationPort = node.InnerText;
                networkList.Add(n);
            }

            Session.Add("networkList", networkList);
            IPListView.DataSource = networkList;
            IPListView.DataBind();

            /********** FILES - DROPPED **********/
            nodeList = stix.SelectNodes(".//FileObj:File", npm);
            fileList = new List<File>();

            for (int i = 0; i < nodeList.Count; i++)
            {
                XmlNode fileNode = nodeList[i];
                File f = new File();
                if (fileNode.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(fileNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    f.ModType = int.Parse(attributeValue[0]);
                    f.UserId = attributeValue[1];
                    f.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                node = fileNode.SelectSingleNode(".//FileObj:File_Name", npm);
                f.FileName = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Size_In_Bytes", npm);
                f.Size = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:File_Format", npm);
                f.FileFormat = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='MD5']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                f.MD5 = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA1']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                f.SHA1 = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA256']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                f.SHA256 = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA512']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                f.SHA512 = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='CRC32']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                f.CRC32 = node.InnerText;
                node = fileNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SSDEEP']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                f.SSDEEP = node.InnerText;
                fileList.Add(f);
            }

            Session.Add("fileList", fileList);
            FileListView.DataSource = fileList;
            FileListView.DataBind();




            /********** ARTIFACT **********/
            nodeList = stix.SelectNodes(".//ArtifactObj:Artifact", npm);
            artifactList = new List<Artifact>();
            for (int i = 0; i < nodeList.Count; i++)
            {
                XmlNode artifactNode = nodeList[i];
                Artifact a = new Artifact();
                if (artifactNode.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(artifactNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    a.ModType = int.Parse(attributeValue[0]);
                    a.UserId = attributeValue[1];
                    a.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                node = artifactNode.SelectSingleNode("./@content_type", npm);
                a.ContentType = node.Value;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='MD5']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                a.MD5 = node.InnerText;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA1']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                a.SHA1 = node.InnerText;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Packaging/ArtifactObj:Encoding/@algorithm", npm);
                a.Algorithm = node.Value;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Raw_Artifact", npm);
                a.RawArtifact = node.InnerText;
                
                artifactList.Add(a);
            }

            Session.Add("artifactList", artifactList);
            ArtifactListView.DataSource = artifactList;
            ArtifactListView.DataBind();
        }

        /***** OVERVIEW *****/

        protected void OverviewListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            OverviewListView.DataSource = overviewList;
            OverviewListView.EditIndex = e.NewEditIndex;
            OverviewListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#overview';", true);
        }

        protected void OverviewListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = OverviewListView.EditItem.DisplayIndex;
            string started = ((TextBox)OverviewListView.EditItem.FindControl("StartedTextBox")).Text;
            string completed = ((TextBox)OverviewListView.EditItem.FindControl("CompletedTextBox")).Text;

            node = stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source", npm);
            node = setLastUserMod(node, 1);

            node = stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source/stixCommon:Time/cyboxCommon:Start_Time", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = started;

            node = stix.SelectSingleNode("/stix:STIX_Package/stix:STIX_Header/stix:Information_Source/stixCommon:Time/cyboxCommon:End_Time", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = completed;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#overview");
        }

        protected void OverviewListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            OverviewListView.DataSource = overviewList;
            OverviewListView.EditIndex = -1;
            OverviewListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#overview';", true);
        }

        /***** PE SECTIONS *****/

        protected void SectionListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            SectionListView.DataSource = sectionList;
            SectionListView.EditIndex = e.NewEditIndex;
            SectionListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void SectionListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = SectionListView.EditItem.DisplayIndex;
            string name = ((TextBox)SectionListView.EditItem.FindControl("NameTextBox")).Text;
            string virtualAdd = ((TextBox)SectionListView.EditItem.FindControl("VirtualAddTextBox")).Text;
            string virtualSize = ((TextBox)SectionListView.EditItem.FindControl("VirtualSizeTextBox")).Text;
            string entropy = ((TextBox)SectionListView.EditItem.FindControl("EntropyTextBox")).Text;

            XmlNode pNode = stix.SelectNodes(".//WinExecutableFileObj:Section", npm)[index];
            pNode = setLastUserMod(pNode, 1);
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:Name", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = name;
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:Virtual_Address", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = virtualAdd;
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:Virtual_Size", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = virtualSize;
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:Entropy/WinExecutableFileObj:Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = entropy;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#static");
        }

        protected void SectionListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            SectionListView.DataSource = sectionList;
            SectionListView.EditIndex = -1;
            SectionListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void SectionInsertButton_Click(object sender, EventArgs e)
        {
            SectionListView.DataSource = sectionList;
            SectionListView.EditIndex = -1;
            SectionListView.InsertItemPosition = InsertItemPosition.FirstItem;
            SectionListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void SectionListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string name = ((TextBox)SectionListView.InsertItem.FindControl("NameTextBox")).Text;
            string virtualAdd = ((TextBox)SectionListView.InsertItem.FindControl("VirtualAddTextBox")).Text;
            string virtualSize = ((TextBox)SectionListView.InsertItem.FindControl("VirtualSizeTextBox")).Text;
            string entropy = ((TextBox)SectionListView.InsertItem.FindControl("EntropyTextBox")).Text;

            XmlNode pNode = stix.SelectSingleNode(".//WinExecutableFileObj:Sections", npm);
            XmlNode sectionNode = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Section", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            sectionNode = setLastUserMod(sectionNode, 2);
            XmlNode sectionHeaderNode = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Section_Header", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            sectionHeaderNode = setLastUserMod(sectionHeaderNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Name", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = name;
            sectionHeaderNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Virtual_Size", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = virtualSize;
            sectionHeaderNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Virtual_Address", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = virtualAdd;
            sectionHeaderNode.AppendChild(node);
            sectionNode.AppendChild(sectionHeaderNode);
            XmlNode entropyNode = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Entropy", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            entropyNode = setLastUserMod(entropyNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Value", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = entropy;
            entropyNode.AppendChild(node);
            sectionNode.AppendChild(entropyNode);
            pNode.AppendChild(sectionNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#static");
        }

        /***** PE IMPORTS *****/

        protected void ImportListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            ImportListView.DataSource = importList;
            ImportListView.EditIndex = e.NewEditIndex;
            ImportListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void ImportListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = ImportListView.EditItem.DisplayIndex;
            string filename = ((TextBox)ImportListView.EditItem.FindControl("FilenameTextBox")).Text;

            XmlNode pNode = stix.SelectNodes(".//WinExecutableFileObj:Import", npm)[index];
            pNode = setLastUserMod(pNode, 1);
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:File_Name", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = filename;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#static");
        }

        protected void ImportListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            ImportListView.DataSource = importList;
            ImportListView.EditIndex = -1;
            ImportListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void ImportListView_ItemDataBound(object sender, ListViewItemEventArgs e)
        {
            int index = e.Item.DisplayIndex;
            ListView FunctionListView = e.Item.FindControl("FunctionListView") as ListView;
            FunctionListView.DataSource = importList[index].Function;
            FunctionListView.DataBind();
        }

        protected void ImportInsertButton_Click(object sender, EventArgs e)
        {
            ImportListView.DataSource = importList;
            ImportListView.EditIndex = -1;
            ImportListView.InsertItemPosition = InsertItemPosition.FirstItem;
            ImportListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void ImportListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string name = ((TextBox)ImportListView.InsertItem.FindControl("FilenameTextBox")).Text;

            XmlNode pNode = stix.SelectSingleNode(".//WinExecutableFileObj:Imports", npm);
            XmlNode importNode = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Import", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            importNode = setLastUserMod(importNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:File_Name", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = name;
            importNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Imported_Functions", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            importNode.AppendChild(node);
            pNode.AppendChild(importNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#static");
        }

        /***** PE IMPORTS - FUNCTIONS *****/

        protected void FunctionListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            ListView FunctionListView = (ListView)sender;
            string clientid = FunctionListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]);
            FunctionListView.DataSource = importList[index].Function;
            FunctionListView.EditIndex = e.NewEditIndex;
            FunctionListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void FunctionListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            ListView FunctionListView = (ListView)sender;
            string clientid = FunctionListView.ClientID;
            string[] arr = clientid.Split('_');
            int import_index = int.Parse(arr[arr.Length - 1]);
            int function_index = FunctionListView.EditItem.DisplayIndex;

            string functionName = ((TextBox)FunctionListView.EditItem.FindControl("FunctionNameTextBox")).Text;
            string virtualAddress = ((TextBox)FunctionListView.EditItem.FindControl("VirtualAddressTextBox")).Text;

            XmlNode pNode = stix.SelectNodes(".//WinExecutableFileObj:Import", npm)[import_index];
            pNode = pNode.SelectNodes(".//WinExecutableFileObj:Imported_Function", npm)[function_index];
            pNode = setLastUserMod(pNode, 1);
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:Function_Name", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = functionName;
            node = pNode.SelectSingleNode(".//WinExecutableFileObj:Virtual_Address", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = virtualAddress;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#static");
        }

        protected void FunctionListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            ListView FunctionListView = (ListView)sender;
            string clientid = FunctionListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]);
            FunctionListView.DataSource = importList[index].Function;
            FunctionListView.EditIndex = -1;
            FunctionListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void FunctionInsertButton_Click(object sender, EventArgs e)
        {
            Button FunctionInsertButton = (Button)sender;
            ListView FunctionListView = (ListView)(FunctionInsertButton.Parent.Parent);
            string clientid = FunctionListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]);
            FunctionListView.DataSource = importList[index].Function;
            FunctionListView.EditIndex = -1;
            FunctionListView.InsertItemPosition = InsertItemPosition.FirstItem;
            FunctionListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#static';", true);
        }

        protected void FunctionListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            ListView FunctionListView = (ListView)sender;

            string virtualAdd = ((TextBox)FunctionListView.InsertItem.FindControl("VirtualAddressTextBox")).Text;
            string name = ((TextBox)FunctionListView.InsertItem.FindControl("FunctionNameTextBox")).Text;

            string clientid = FunctionListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]);

            XmlNode pNode = stix.SelectNodes(".//WinExecutableFileObj:Import", npm)[index];
            XmlNode importedFunctionsNode = pNode.SelectSingleNode(".//WinExecutableFileObj:Imported_Functions", npm);
            XmlNode importedFunctionNode = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Imported_Function", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            importedFunctionNode = setLastUserMod(importedFunctionNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Function_Name", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = name;
            importedFunctionNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "WinExecutableFileObj:Virtual_Address", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = virtualAdd;
            importedFunctionNode.AppendChild(node);
            importedFunctionsNode.AppendChild(importedFunctionNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#static");
        }

        /********** BEHAVIOUR - PROCESS **********/

        protected void ProcessListView_PagePropertiesChanged(object sender, EventArgs e)
        {
            ListView ProcessListView = (ListView)sender;
            ProcessListView.DataSource = processList;
            ProcessListView.DataBind();
        }

        protected void ProcessListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            ProcessListView.DataSource = processList;
            ProcessListView.EditIndex = e.NewEditIndex;
            ProcessListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ProcessListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = ProcessListView.EditItem.DisplayIndex;
            XmlNode pNode = stix.SelectNodes(".//WinProcessObj:Windows_Process", npm)[index];
            pNode = setLastUserMod(pNode, 1);

            string name = ((TextBox)ProcessListView.EditItem.FindControl("NameTextBox")).Text;
            node = pNode.SelectSingleNode(".//ProcessObj:Name", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = name;

            string status = ((TextBox)ProcessListView.EditItem.FindControl("StatusTextBox")).Text;
            node = pNode.SelectSingleNode(".//ProcessObj:Status", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = status;

            string creationTime = ((TextBox)ProcessListView.EditItem.FindControl("CreationTimeTextBox")).Text;
            node = pNode.SelectSingleNode(".//ProcessObj:Creation_Time", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = creationTime;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#behavior");
        }

        protected void ProcessListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            ProcessListView.DataSource = processList;
            ProcessListView.EditIndex = -1;
            ProcessListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ProcessListView_ItemDataBound(object sender, ListViewItemEventArgs e)
        {
            int index = e.Item.DisplayIndex + (process_page * 10);
            ListView ArgListView = e.Item.FindControl("ArgListView") as ListView;
            ArgListView.DataSource = processList[index].Arg;
            ArgListView.DataBind();
        }

        protected void ProcessListView_PagePropertiesChanging(object sender, PagePropertiesChangingEventArgs e)
        {
            process_page = (e.StartRowIndex / e.MaximumRows);
            Session.Add("process_page", process_page);

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ProcessInsertButton_Click(object sender, EventArgs e)
        {
            ProcessListView.DataSource = processList;
            ProcessListView.EditIndex = -1;
            ProcessListView.InsertItemPosition = InsertItemPosition.FirstItem;
            ProcessListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ProcessListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string creationTime = ((TextBox)ProcessListView.InsertItem.FindControl("CreationTimeTextBox")).Text;
            string name = ((TextBox)ProcessListView.InsertItem.FindControl("NameTextBox")).Text;
            string status = ((TextBox)ProcessListView.InsertItem.FindControl("StatusTextBox")).Text;

            XmlNode pNode = stix.SelectSingleNode(".//WinProcessObj:Windows_Process", npm);
            pNode = pNode.ParentNode.ParentNode.ParentNode.ParentNode;

            XmlNode observableNode = stix.CreateNode(XmlNodeType.Element, "cybox:Observable", "http://cybox.mitre.org/cybox-2");
            observableNode = setLastUserMod(observableNode, 2);
            XmlNode objectNode = stix.CreateNode(XmlNodeType.Element, "cybox:Object", "http://cybox.mitre.org/cybox-2");
            objectNode = setLastUserMod(objectNode, 2);
            XmlNode propertiesNode = stix.CreateNode(XmlNodeType.Element, "cybox:Properties", "http://cybox.mitre.org/cybox-2");
            propertiesNode = setLastUserMod(propertiesNode, 2);
            XmlAttribute xsiTypeAttribute = stix.CreateAttribute("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance");
            xsiTypeAttribute.Value = "WinProcessObj:WindowsProcessObjectType";
            propertiesNode.Attributes.Append(xsiTypeAttribute);
            XmlNode processNode = stix.CreateNode(XmlNodeType.Element, "WinProcessObj:Windows_Process", "http://cybox.mitre.org/objects#WinProcessObject-2");
            processNode = setLastUserMod(processNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "ProcessObj:Name", "http://cybox.mitre.org/objects#ProcessObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = name;
            processNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "ProcessObj:Status", "http://cybox.mitre.org/objects#ProcessObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = status;
            processNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "ProcessObj:Creation_Time", "http://cybox.mitre.org/objects#ProcessObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = creationTime;
            processNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "ProcessObj:Environment_Variable_List", "http://cybox.mitre.org/objects#ProcessObject-2");
            node = setLastUserMod(node, 2);
            processNode.AppendChild(node);
            propertiesNode.AppendChild(processNode);
            objectNode.AppendChild(propertiesNode);
            observableNode.AppendChild(objectNode);
            pNode.AppendChild(observableNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#behavior");
        }

        protected void TemplatePagerField_OnPagerCommand(object sender, DataPagerCommandEventArgs e)
        {
            // Check which button raised the event
            switch (e.CommandName)
            {
                case "Next":
                    int newIndex = e.Item.Pager.StartRowIndex + e.Item.Pager.PageSize;
                    if (newIndex <= e.TotalRowCount)
                    {
                        e.NewStartRowIndex = newIndex;
                        e.NewMaximumRows = e.Item.Pager.MaximumRows;
                    }
                    break;
                case "Previous":
                    e.NewStartRowIndex = e.Item.Pager.StartRowIndex - e.Item.Pager.PageSize;
                    e.NewMaximumRows = e.Item.Pager.MaximumRows;
                    break;
                case "First":
                    e.NewStartRowIndex = 0;
                    e.NewMaximumRows = e.Item.Pager.MaximumRows;
                    break;
                case "Last":
                    e.NewStartRowIndex = ((int)Math.Floor(e.TotalRowCount / 10.0)) * 10;
                    e.NewMaximumRows = e.Item.Pager.MaximumRows;
                    break;
            }
        }

        /***** BEHAVIOUR - PROCESS - ARGUMENTS *****/

        protected void ArgListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            ListView ArgListView = (ListView)sender;
            string clientid = ArgListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]) + (process_page*10);
            ArgListView.DataSource = processList[index].Arg;
            ArgListView.EditIndex = e.NewEditIndex;
            ArgListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ArgListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            ListView ArgListView = (ListView)sender;
            string clientid = ArgListView.ClientID;
            string[] arr = clientid.Split('_');
            int process_index = int.Parse(arr[arr.Length - 1]) + (process_page * 10);
            int arg_index = ArgListView.EditItem.DisplayIndex;

            string name = ((TextBox)ArgListView.EditItem.FindControl("NameTextBox")).Text;
            string val = ((TextBox)ArgListView.EditItem.FindControl("ValTextBox")).Text;

            XmlNode pNode = stix.SelectNodes(".//WinProcessObj:Windows_Process", npm)[process_index];
            pNode = pNode.SelectNodes(".//cyboxCommon:Environment_Variable", npm)[arg_index];
            pNode = setLastUserMod(pNode, 1);

            node = pNode.SelectSingleNode(".//cyboxCommon:Name", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = name;
            node = pNode.SelectSingleNode(".//cyboxCommon:Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = val;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#behavior");
        }

        protected void ArgListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            ListView ArgListView = (ListView)sender;
            string clientid = ArgListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]) + (process_page * 10);
            ArgListView.DataSource = processList[index].Arg;
            ArgListView.EditIndex = -1;
            ArgListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ArgInsertButton_Click(object sender, EventArgs e)
        {
            Button ArgInsertButton = (Button)sender;
            ArgInsertButton.Enabled = false;
            ArgInsertButton.Visible = false;
            ListView ArgListView = (ListView)(ArgInsertButton.Parent.Parent);
            string clientid = ArgListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]) + (process_page * 10);
            ArgListView.DataSource = processList[index].Arg;
            ArgListView.EditIndex = -1;
            ArgListView.InsertItemPosition = InsertItemPosition.FirstItem;
            ArgListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#behavior';", true);
        }

        protected void ArgListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            ListView ArgListView = (ListView)sender;

            string name = ((TextBox)ArgListView.InsertItem.FindControl("NameTextBox")).Text;
            string val = ((TextBox)ArgListView.InsertItem.FindControl("ValTextBox")).Text;

            string clientid = ArgListView.ClientID;
            string[] arr = clientid.Split('_');
            int index = int.Parse(arr[arr.Length - 1]) + (process_page * 10);

            XmlNode pNode = stix.SelectNodes(".//WinProcessObj:Windows_Process", npm)[index];
            XmlNode envListNode = pNode.SelectSingleNode(".//ProcessObj:Environment_Variable_List", npm);
            XmlNode envNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Environment_Variable", "http://cybox.mitre.org/objects#ProcessObject-2");
            envNode = setLastUserMod(envNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Name", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = name;
            envNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = val;
            envNode.AppendChild(node);
            envListNode.AppendChild(envNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#behavior");
        }

        /***** NETWORK - IP TRAFFIC *****/

        protected void IPListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            IPListView.DataSource = networkList;
            IPListView.EditIndex = e.NewEditIndex;
            IPListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#network';", true);
        }

        protected void IPListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = IPListView.EditItem.DisplayIndex;
            string sourceIP = ((TextBox)IPListView.EditItem.FindControl("SourceIPTextBox")).Text;
            string sourcePort = ((TextBox)IPListView.EditItem.FindControl("SourcePortTextBox")).Text;
            string destinationIP = ((TextBox)IPListView.EditItem.FindControl("DestinationIPTextBox")).Text;
            string destinationPort = ((TextBox)IPListView.EditItem.FindControl("DestinationPortTextBox")).Text;

            XmlNode pNode = stix.SelectNodes(".//NetworkConnectionObj:Network_Connection", npm)[index];
            pNode = setLastUserMod(pNode, 1);
            node = pNode.SelectSingleNode(".//NetworkConnectionObj:Source_Socket_Address/SocketAddressObj:IP_Address", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = sourceIP;
            node = pNode.SelectSingleNode(".//NetworkConnectionObj:Source_Socket_Address/SocketAddressObj:Port", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = sourcePort;
            node = pNode.SelectSingleNode(".//NetworkConnectionObj:Destination_Socket_Address/SocketAddressObj:IP_Address", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = destinationIP;
            node = pNode.SelectSingleNode(".//NetworkConnectionObj:Destination_Socket_Address/SocketAddressObj:Port", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = destinationPort;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#network");
        }

        protected void IPListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            IPListView.DataSource = networkList;
            IPListView.EditIndex = -1;
            IPListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#network';", true);
        }

        protected void IPInsertButton_Click(object sender, EventArgs e)
        {
            IPListView.DataSource = networkList;
            IPListView.EditIndex = -1;
            IPListView.InsertItemPosition = InsertItemPosition.FirstItem;
            IPListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#network';", true);
        }

        protected void IPListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string sourceIP = ((TextBox)IPListView.InsertItem.FindControl("SourceIPTextBox")).Text;
            string sourcePort = ((TextBox)IPListView.InsertItem.FindControl("SourcePortTextBox")).Text;
            string destinationIP = ((TextBox)IPListView.InsertItem.FindControl("DestinationIPTextBox")).Text;
            string destinationPort = ((TextBox)IPListView.InsertItem.FindControl("DestinationPortTextBox")).Text;

            XmlNode pNode = stix.SelectSingleNode(".//NetworkConnectionObj:Network_Connection", npm);
            pNode = pNode.ParentNode.ParentNode.ParentNode.ParentNode;

            XmlNode observableNode = stix.CreateNode(XmlNodeType.Element, "cybox:Observable", "http://cybox.mitre.org/cybox-2");
            observableNode = setLastUserMod(observableNode, 2);
            XmlNode objectNode = stix.CreateNode(XmlNodeType.Element, "cybox:Object", "http://cybox.mitre.org/cybox-2");
            objectNode = setLastUserMod(objectNode, 2);
            XmlNode propertiesNode = stix.CreateNode(XmlNodeType.Element, "cybox:Properties", "http://cybox.mitre.org/cybox-2");
            propertiesNode = setLastUserMod(propertiesNode, 2);
            XmlAttribute xsiTypeAttribute = stix.CreateAttribute("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance");
            xsiTypeAttribute.Value = "NetworkConnectionObj:NetworkConnectionObjectType";
            propertiesNode.Attributes.Append(xsiTypeAttribute);
            XmlNode networkNode = stix.CreateNode(XmlNodeType.Element, "NetworkConnectionObj:Network_Connection", "http://cybox.mitre.org/objects#NetworkConnectionObject-2");
            networkNode = setLastUserMod(networkNode, 2);
            XmlNode sourceNode = stix.CreateNode(XmlNodeType.Element, "NetworkConnectionObj:Source_Socket_Address", "http://cybox.mitre.org/objects#NetworkConnectionObject-2");
            sourceNode = setLastUserMod(sourceNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "SocketAddressObj:IP_Address", "http://cybox.mitre.org/objects#SocketAddressObject-1");
            node = setLastUserMod(node, 2);
            node.InnerText = sourceIP;
            sourceNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "SocketAddressObj:Port", "http://cybox.mitre.org/objects#SocketAddressObject-1");
            node = setLastUserMod(node, 2);
            node.InnerText = sourcePort;
            sourceNode.AppendChild(node);
            networkNode.AppendChild(sourceNode);
            XmlNode destinationNode = stix.CreateNode(XmlNodeType.Element, "NetworkConnectionObj:Destination_Socket_Address", "http://cybox.mitre.org/objects#NetworkConnectionObject-2");
            destinationNode = setLastUserMod(destinationNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "SocketAddressObj:IP_Address", "http://cybox.mitre.org/objects#SocketAddressObject-1");
            node = setLastUserMod(node, 2);
            node.InnerText = destinationIP;
            destinationNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "SocketAddressObj:Port", "http://cybox.mitre.org/objects#SocketAddressObject-1");
            networkNode = setLastUserMod(networkNode, 2);
            node.InnerText = destinationPort;
            destinationNode.AppendChild(node);
            networkNode.AppendChild(destinationNode);
            propertiesNode.AppendChild(networkNode);
            objectNode.AppendChild(propertiesNode);
            observableNode.AppendChild(objectNode);
            pNode.AppendChild(observableNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#network");
        }

        /***** FILE - DROPPED *****/

        protected void FileListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            FileListView.DataSource = fileList;
            FileListView.EditIndex = e.NewEditIndex;
            FileListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#dropped';", true);
        }

        protected void FileListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = FileListView.EditItem.DisplayIndex;

            string filename = ((TextBox)FileListView.EditItem.FindControl("FileNameTextBox")).Text;
            string size = ((TextBox)FileListView.EditItem.FindControl("SizeTextBox")).Text;
            string fileformat = ((TextBox)FileListView.EditItem.FindControl("FileFormatTextBox")).Text;
            string md5_internal = ((TextBox)FileListView.EditItem.FindControl("MD5TextBox")).Text;
            string sha1 = ((TextBox)FileListView.EditItem.FindControl("SHA1TextBox")).Text;
            string sha256 = ((TextBox)FileListView.EditItem.FindControl("SHA256TextBox")).Text;
            string sha512 = ((TextBox)FileListView.EditItem.FindControl("SHA512TextBox")).Text;
            string crc32 = ((TextBox)FileListView.EditItem.FindControl("CRC32TextBox")).Text;
            string ssdeep = ((TextBox)FileListView.EditItem.FindControl("SSDEEPTextBox")).Text;

            XmlNode pNode = stix.SelectNodes(".//FileObj:File", npm)[index];
            pNode = setLastUserMod(pNode, 1);
            node = pNode.SelectSingleNode(".//FileObj:File_Name", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = filename;
            node = pNode.SelectSingleNode(".//FileObj:Size_In_Bytes", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = size;
            node = pNode.SelectSingleNode(".//FileObj:File_Format", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = fileformat;
            node = pNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='MD5']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = md5_internal;
            node = pNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA1']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = sha1;
            node = pNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA256']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = sha256;
            node = pNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA512']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = sha512;
            node = pNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='CRC32']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = crc32;
            node = pNode.SelectSingleNode(".//FileObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SSDEEP']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = ssdeep;
            
            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#dropped");
        }

        protected void FileListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            FileListView.DataSource = fileList;
            FileListView.EditIndex = -1;
            FileListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#dropped';", true);
        }

        protected void FileInsertButton_Click(object sender, EventArgs e)
        {
            FileListView.DataSource = fileList;
            FileListView.EditIndex = -1;
            FileListView.InsertItemPosition = InsertItemPosition.FirstItem;
            FileListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#dropped';", true);
        }

        protected void FileListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string filename = ((TextBox)FileListView.InsertItem.FindControl("FileNameTextBox")).Text;
            string size = ((TextBox)FileListView.InsertItem.FindControl("SizeTextBox")).Text;
            string fileformat = ((TextBox)FileListView.InsertItem.FindControl("FileFormatTextBox")).Text;
            string md5_internal = ((TextBox)FileListView.InsertItem.FindControl("MD5TextBox")).Text;
            string sha1 = ((TextBox)FileListView.InsertItem.FindControl("SHA1TextBox")).Text;
            string sha256 = ((TextBox)FileListView.InsertItem.FindControl("SHA256TextBox")).Text;
            string sha512 = ((TextBox)FileListView.InsertItem.FindControl("SHA512TextBox")).Text;
            string crc32 = ((TextBox)FileListView.InsertItem.FindControl("CRC32TextBox")).Text;
            string ssdeep = ((TextBox)FileListView.InsertItem.FindControl("SSDEEPTextBox")).Text;

            XmlNode pNode = stix.SelectSingleNode(".//FileObj:File", npm);
            pNode = pNode.ParentNode.ParentNode.ParentNode.ParentNode;

            XmlNode observableNode = stix.CreateNode(XmlNodeType.Element, "cybox:Observable", "http://cybox.mitre.org/cybox-2");
            observableNode = setLastUserMod(observableNode, 2);
            XmlNode objectNode = stix.CreateNode(XmlNodeType.Element, "cybox:Object", "http://cybox.mitre.org/cybox-2");
            objectNode = setLastUserMod(objectNode, 2);
            XmlNode propertiesNode = stix.CreateNode(XmlNodeType.Element, "cybox:Properties", "http://cybox.mitre.org/cybox-2");
            propertiesNode = setLastUserMod(propertiesNode, 2);
            XmlAttribute xsiTypeAttribute = stix.CreateAttribute("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance");
            xsiTypeAttribute.Value = "FileObj:FileObjectType";
            propertiesNode.Attributes.Append(xsiTypeAttribute);
            XmlNode fileNode = stix.CreateNode(XmlNodeType.Element, "FileObj:File", "http://cybox.mitre.org/objects#FileObject-2");
            fileNode = setLastUserMod(fileNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "FileObj:File_Name", "http://cybox.mitre.org/objects#FileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = filename;
            fileNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "FileObj:Size_In_Bytes", "http://cybox.mitre.org/objects#FileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = size;
            fileNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "FileObj:File_Format", "http://cybox.mitre.org/objects#FileObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = fileformat;
            fileNode.AppendChild(node);
            XmlNode hashesNode = stix.CreateNode(XmlNodeType.Element, "FileObj:Hashes", "http://cybox.mitre.org/objects#FileObject-2");
            hashesNode = setLastUserMod(hashesNode, 2);
            XmlNode hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "MD5";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = md5_internal;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "SHA1";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = sha1;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "SHA256";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = sha256;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "SHA512";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = sha512;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "CRC32";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node.InnerText = crc32;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "SSDEEP";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = ssdeep;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            fileNode.AppendChild(hashesNode);
            propertiesNode.AppendChild(fileNode);
            objectNode.AppendChild(propertiesNode);
            observableNode.AppendChild(objectNode);
            pNode.AppendChild(observableNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#dropped");
        }










        /***** ARTIFACT *****/

        protected void ArtifactListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            ArtifactListView.DataSource = artifactList;
            ArtifactListView.EditIndex = e.NewEditIndex;
            ArtifactListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#artifact';", true);
        }

        protected void ArtifactListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = ArtifactListView.EditItem.DisplayIndex;

            string contentType = ((TextBox)ArtifactListView.EditItem.FindControl("ContentTypeTextBox")).Text;
            string md5_internal = ((TextBox)ArtifactListView.EditItem.FindControl("MD5TextBox")).Text;
            string sha1 = ((TextBox)ArtifactListView.EditItem.FindControl("SHA1TextBox")).Text;
            string algorithm = ((TextBox)ArtifactListView.EditItem.FindControl("AlgorithmTextBox")).Text;
            string rawArtifact = ((TextBox)ArtifactListView.EditItem.FindControl("RawArtifactTextBox")).Text;
            
            /*
             * 
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='MD5']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                a.MD5 = node.InnerText;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA1']", npm);
                node = node.ParentNode;
                node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
                a.SHA1 = node.InnerText;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Packaging/ArtifactObj:Encoding/@algorithm", npm);
                a.Algorithm = node.Value;
                node = artifactNode.SelectSingleNode(".//ArtifactObj:Raw_Artifact", npm);
                a.RawArtifact = node.InnerText;
             */
            XmlNode pNode = stix.SelectNodes(".//ArtifactObj:Artifact", npm)[index];
            pNode = setLastUserMod(pNode, 1);
            pNode.Attributes.Remove(node.Attributes["content_type"]);
            XmlAttribute attribute = stix.CreateAttribute("content_type");
            attribute.Value = contentType;
            pNode.Attributes.Append(attribute);
            node = pNode.SelectSingleNode(".//ArtifactObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='MD5']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = md5_internal;
            node = pNode.SelectSingleNode(".//ArtifactObj:Hashes/cyboxCommon:Hash/cyboxCommon:Type[text()='SHA1']", npm);
            node = setLastUserMod(node, 1);
            node = node.ParentNode;
            node = node.SelectSingleNode(".//cyboxCommon:Simple_Hash_Value", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = sha1;
            node = pNode.SelectSingleNode(".//ArtifactObj:Packaging/ArtifactObj:Encoding", npm);
            node = setLastUserMod(node, 1);
            node.Attributes.Remove(node.Attributes["algorithm"]);
            attribute = stix.CreateAttribute("algorithm");
            attribute.Value = algorithm;
            node.Attributes.Append(attribute);
            node = pNode.SelectSingleNode(".//ArtifactObj:Raw_Artifact", npm);
            node = setLastUserMod(node, 1);
            node.InnerText = rawArtifact;

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#artifact");
        }

        protected void ArtifactListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            ArtifactListView.DataSource = artifactList;
            ArtifactListView.EditIndex = -1;
            ArtifactListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#artifact';", true);
        }

        protected void ArtifactInsertButton_Click(object sender, EventArgs e)
        {
            ArtifactListView.DataSource = artifactList;
            ArtifactListView.EditIndex = -1;
            ArtifactListView.InsertItemPosition = InsertItemPosition.FirstItem;
            ArtifactListView.DataBind();

            ClientScript.RegisterStartupScript(this.GetType(), "hash", "location.hash = '#artifact';", true);
        }

        protected void ArtifactListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            FileUpload artifactFileUpload = (FileUpload)ArtifactListView.InsertItem.FindControl("artifactFileUpload");
            Label errorLabel = (Label)ArtifactListView.InsertItem.FindControl("errorlabel");

            if (Membership.GetUser() == null)
            {
                Response.Redirect("login.aspx");
            }

            if (!artifactFileUpload.HasFile)
            {
                errorLabel.Text = "Error: Please select a file.";
                return;
            }

            //string contentType = artifactFileUpload.PostedFile.ContentType;
            string contentType = new FileInfo(artifactFileUpload.PostedFile.FileName).Extension;
            string md5_internal = Sample.generateMD5(artifactFileUpload.FileBytes);
            string sha1 = Sample.generateSHA1(artifactFileUpload.FileBytes);
            string algorithm = "Base64";
            string rawArtifact = Convert.ToBase64String(artifactFileUpload.FileBytes);

            XmlNode pNode;
            if (stix.SelectSingleNode(".//ArtifactObj:Artifact", npm) != null)
            {
                pNode = stix.SelectSingleNode(".//ArtifactObj:Artifact", npm);
                pNode = pNode.ParentNode.ParentNode.ParentNode.ParentNode;
            }
            else
            {
                pNode = stix.SelectSingleNode("/stix:STIX_Package/stix:Indicators/stix:Indicator/indicator:Observable/cybox:Observable_Composition", npm);
                XmlNode mainbservableNode = stix.CreateNode(XmlNodeType.Element, "cybox:Observable", "http://cybox.mitre.org/cybox-2");
                mainbservableNode = setLastUserMod(mainbservableNode, 2);
                XmlNode observableCompositionNode = stix.CreateNode(XmlNodeType.Element, "cybox:Observable_Composition", "http://cybox.mitre.org/cybox-2");
                observableCompositionNode = setLastUserMod(observableCompositionNode, 2);

                mainbservableNode.AppendChild(observableCompositionNode);
                pNode.AppendChild(mainbservableNode);
                pNode = observableCompositionNode;
            }

            XmlNode observableNode = stix.CreateNode(XmlNodeType.Element, "cybox:Observable", "http://cybox.mitre.org/cybox-2");
            observableNode = setLastUserMod(observableNode, 2);
            XmlNode objectNode = stix.CreateNode(XmlNodeType.Element, "cybox:Object", "http://cybox.mitre.org/cybox-2");
            objectNode = setLastUserMod(objectNode, 2);
            XmlNode propertiesNode = stix.CreateNode(XmlNodeType.Element, "cybox:Properties", "http://cybox.mitre.org/cybox-2");
            propertiesNode = setLastUserMod(propertiesNode, 2);
            XmlAttribute xsiTypeAttribute = stix.CreateAttribute("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance");
            xsiTypeAttribute.Value = "ArtifactObj:ArtifactObjectType";
            propertiesNode.Attributes.Append(xsiTypeAttribute);
            XmlNode artifactNode = stix.CreateNode(XmlNodeType.Element, "ArtifactObj:Artifact", "http://cybox.mitre.org/objects#ArtifactObject-2");
            artifactNode = setLastUserMod(artifactNode, 2);

            XmlAttribute contentTypeAttribute = stix.CreateAttribute("content_type");
            contentTypeAttribute.Value = contentType;
            artifactNode.Attributes.Append(contentTypeAttribute);
            XmlNode hashesNode = stix.CreateNode(XmlNodeType.Element, "ArtifactObj:Hashes", "http://cybox.mitre.org/objects#ArtifactObject-2");
            hashesNode = setLastUserMod(hashesNode, 2);
            XmlNode hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "MD5";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = md5_internal;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            hashNode = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Hash", "http://cybox.mitre.org/common-2");
            hashNode = setLastUserMod(hashNode, 2);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Type", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = "SHA1";
            hashNode.AppendChild(node);
            node = stix.CreateNode(XmlNodeType.Element, "cyboxCommon:Simple_Hash_Value", "http://cybox.mitre.org/common-2");
            node = setLastUserMod(node, 2);
            node.InnerText = sha1;
            hashNode.AppendChild(node);
            hashesNode.AppendChild(hashNode);
            artifactNode.AppendChild(hashesNode);

            XmlNode packagingNode = stix.CreateNode(XmlNodeType.Element, "ArtifactObj:Packaging", "http://cybox.mitre.org/objects#ArtifactObject-2");
            packagingNode = setLastUserMod(packagingNode, 2);
            XmlNode encodingNode = stix.CreateNode(XmlNodeType.Element, "ArtifactObj:Encoding", "http://cybox.mitre.org/objects#ArtifactObject-2");
            encodingNode = setLastUserMod(encodingNode, 2);
            XmlAttribute algorithmAttribute = stix.CreateAttribute("algorithm");
            algorithmAttribute.Value = algorithm;
            encodingNode.Attributes.Append(algorithmAttribute);
            packagingNode.AppendChild(encodingNode);
            artifactNode.AppendChild(packagingNode);

            node = stix.CreateNode(XmlNodeType.Element, "ArtifactObj:Raw_Artifact", "http://cybox.mitre.org/objects#ArtifactObject-2");
            node = setLastUserMod(node, 2);
            node.InnerText = rawArtifact;
            artifactNode.AppendChild(node);

            propertiesNode.AppendChild(artifactNode);
            objectNode.AppendChild(propertiesNode);
            observableNode.AppendChild(objectNode);
            pNode.AppendChild(observableNode);

            stix.Save(path);

            Response.Redirect("analysis.aspx?md5=" + md5 + "#artifact");
        }

        protected void ArtifactListView_SelectedIndexChanged(object sender, EventArgs e)
        {

            int index = ArtifactListView.SelectedIndex;
            Artifact a = artifactList[index];

            byte[] content = Convert.FromBase64String(a.RawArtifact);

            string completePath = Server.MapPath("~/Upload/") + a.MD5 + a.ContentType;
            System.IO.File.WriteAllBytes(completePath, content);
            FileInfo file = new FileInfo(completePath);
            if (file.Exists)
            {
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + file.Name);
                Response.AddHeader("Content-Length", file.Length.ToString());
                //Response.ContentType = "text/plain";
                Response.Flush();
                Response.TransmitFile(file.FullName);
                Response.End();
            }
        }

        public XmlNode setLastUserMod(XmlNode node, int modType)
        {
            //modType 0-update 1-insert
            node.Attributes.Remove(node.Attributes["lastusermod"]);
            XmlAttribute attribute = stix.CreateAttribute("lastusermod");
            attribute.Value = modType + "::" + Membership.GetUser().ProviderUserKey.ToString() + "::" + DateTime.Now;
            node.Attributes.Append(attribute);
            return node;
        }

        public string setLastUserModStyle(String value)
        {
            int modType = int.Parse(value);
            switch (modType) {
                case 1:
                    return "edit";
                case 2:
                    return "insert";
                default:
                    return "";
            }
        }

        protected void editorLinkButton_Click(object sender, EventArgs e)
        {
            Response.Redirect("editor.aspx?md5=" + md5);
        }

        protected void ArtifactListView_SelectedIndexChanging(object sender, ListViewSelectEventArgs e)
        {

        }

    }

    public class Overview : LastUserMod
    {
        string started;
        string completed;
        string duration;

        public string Started
        {
            get { return started; }
            set { started = value; }
        }

        public string Completed
        {
            get { return completed; }
            set { completed = value; }
        }

        public string Duration
        {
            get { return duration; }
            set { duration = value; }
        }
    }

    public class Section : LastUserMod
    {
        string name, virtualAdd, virtualSize, entropy;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string VirtualAdd
        {
            get { return virtualAdd; }
            set { virtualAdd = value; }
        }

        public string VirtualSize
        {
            get { return virtualSize; }
            set { virtualSize = value; }
        }

        public string Entropy
        {
            get { return entropy; }
            set { entropy = value; }
        }
    }

    public class Import : LastUserMod
    {
        string filename;
        List<Function> function;

        public string Filename
        {
            get { return filename; }
            set { filename = value; }
        }

        public List<Function> Function
        {
            get { return function; }
            set { function = value; }
        }
    }

    public class Function : LastUserMod
    {
        string functionName;
        string virtualAddress;

        public string FunctionName
        {
            get { return functionName; }
            set { functionName = value; }
        }

        public string VirtualAddress
        {
            get { return virtualAddress; }
            set { virtualAddress = value; }
        }
    }

    public class Process : LastUserMod
    {
        string name;
        string status;
        string creationTime;
        List <Argument> arg;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Status
        {
            get { return status; }
            set { status = value; }
        }

        public string CreationTime
        {
            get { return creationTime; }
            set { creationTime = value; }
        }

        public List<Argument> Arg
        {
            get { return arg; }
            set { arg = value; }
        }
    }

    public class Argument : LastUserMod
    {
        string name;
        string val;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Val
        {
            get { return val; }
            set { val = value; }
        }
    }

    public class Network : LastUserMod
    {
        string sourceIP;
        string sourcePort;
        string destinationIP;
        string destinationPort;

        public string SourceIP
        {
            get { return sourceIP; }
            set { sourceIP = value; }
        }

        public string SourcePort
        {
            get { return sourcePort; }
            set { sourcePort = value; }
        }

        public string DestinationIP
        {
            get { return destinationIP; }
            set { destinationIP = value; }
        }

        public string DestinationPort
        {
            get { return destinationPort; }
            set { destinationPort = value; }
        }
    }

    public class File : LastUserMod
    {
        string fileName;
        string size;
        string fileFormat;
        string md5;
        string sha1;
        string sha256;
        string sha512;
        string crc32;
        string ssdeep;

        public string FileName
        {
            get { return fileName; }
            set { fileName = value; }
        }

        public string Size
        {
            get { return size; }
            set { size = value; }
        }

        public string FileFormat
        {
            get { return fileFormat; }
            set { fileFormat = value; }
        }

        public string MD5
        {
            get { return md5; }
            set { md5 = value; }
        }

        public string SHA1
        {
            get { return sha1; }
            set { sha1 = value; }
        }

        public string SHA256
        {
            get { return sha256; }
            set { sha256 = value; }
        }

        public string SHA512
        {
            get { return sha512; }
            set { sha512 = value; }
        }

        public string CRC32
        {
            get { return crc32; }
            set { crc32 = value; }
        }

        public string SSDEEP
        {
            get { return ssdeep; }
            set { ssdeep = value; }
        }
    }

    public class Artifact : LastUserMod
    {
        string contentType;
        string md5;
        string sha1;
        string algorithm;
        string rawArtifact;

        public string ContentType
        {
            get { return contentType; }
            set { contentType = value; }
        }

        public string MD5
        {
            get { return md5; }
            set { md5 = value; }
        }

        public string SHA1
        {
            get { return sha1; }
            set { sha1 = value; }
        }

        public string Algorithm
        {
            get { return algorithm; }
            set { algorithm = value; }
        }

        public string RawArtifact
        {
            get { return rawArtifact; }
            set { rawArtifact = value; }
        }
    }

    public class LastUserMod
    {
        int modType;
        string userId;
        DateTime modDateTime;

        public int ModType
        {
            get { return modType; }
            set { modType = value; }
        }

        public string UserId
        {
            get { return userId; }
            set { userId = value; }
        }

        public DateTime ModDateTime
        {
            get { return modDateTime; }
            set { modDateTime = value; }
        }
    }
}