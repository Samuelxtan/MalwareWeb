using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml;

namespace Malware_FYPJ.page
{
    public partial class editor : System.Web.UI.Page
    {
        String md5 = "";
        string path = "";
        string xpath = "";
        String[] attributeValue;
        XmlDocument stix = new XmlDocument();
        XmlNamespaceManager npm;
        XmlNode node;
        List<ChildNode> childNodeList = new List<ChildNode>();
        List<Value> valueList = new List<Value>();
        List<Attribute> attributeList = new List<Attribute>();
        List<Attribute> newAttributeList = new List<Attribute>();
        XmlNamespaceManager schema_ns;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (Request.QueryString["md5"] != null)
            {
                md5 = Request.QueryString["md5"];
            }
            else
            {
                Response.Redirect("view.aspx");
            }

            if (Request.QueryString["xpath"] != null)
            {
                if (Request.QueryString["xpath"].Equals(""))
                {
                    xpath = "/";
                }
                else
                {
                    xpath = Request.QueryString["xpath"];
                }
            }
            else
            {
                xpath = "/";
            }

            loadXpathPanel();

            if (IsPostBack)
            {
                node = (XmlNode)Session["node"];
                childNodeList = (List<ChildNode>)Session["childNodeList"];
                valueList = (List<Value>)Session["valueList"];
                attributeList = (List<Attribute>)Session["attributeList"];
                newAttributeList = (List<Attribute>)Session["newAttributeList"];
                npm = (XmlNamespaceManager)Session["npm"];
                stix = (XmlDocument)Session["stix"];
                path = (string)Session["path"];
                schema_ns = (XmlNamespaceManager)Session["schema_ns"];
            }
            else
            {
                loadSTIXReport();
            }
        }

        protected void loadSTIXReport()
        {
            try
            {
                path = "c://Repository/Report/Raw_Cuckoo/" + md5 + "/reports/report.stix.xml";
                Session.Add("path", path);

                stix.Load(path);
                Session.Add("stix", stix);

                npm = new XmlNamespaceManager(stix.NameTable);
                npm.AddNamespace("CodeObj", "http://cybox.mitre.org/objects#CodeObject-2");
                npm.AddNamespace("ioc-tr", "http://schemas.mandiant.com/2010/ioc/TR/");
                npm.AddNamespace("GUIObj", "http://cybox.mitre.org/objects#GUIObject-2");
                npm.AddNamespace("ioc", "http://schemas.mandiant.com/2010/ioc");
                npm.AddNamespace("WinNetworkRouteEntryObj", "http://cybox.mitre.org/objects#WinNetworkRouteEntryObject-2");
                npm.AddNamespace("WinDriverObj", "http://cybox.mitre.org/objects#WinDriverObject-2");
                npm.AddNamespace("PDFFileObj", "http://cybox.mitre.org/objects#PDFFileObject-1");
                npm.AddNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                npm.AddNamespace("DiskObj", "http://cybox.mitre.org/objects#DiskObject-2");
                npm.AddNamespace("UserAccountObj", "http://cybox.mitre.org/objects#UserAccountObject-2");
                npm.AddNamespace("CustomObj", "http://cybox.mitre.org/objects#CustomObject-1");
                npm.AddNamespace("coa", "http://stix.mitre.org/CourseOfAction-1");
                npm.AddNamespace("http://stix.mitre.org/CourseOfAction-1", "");
                npm.AddNamespace("AddressObj", "http://cybox.mitre.org/objects#AddressObject-2");
                npm.AddNamespace("UserSessionObj", "http://cybox.mitre.org/objects#UserSessionObject-2");
                npm.AddNamespace("cvrf", "http://www.icasi.org/CVRF/schema/cvrf/1.1");
                npm.AddNamespace("WinPipeObj", "http://cybox.mitre.org/objects#WinPipeObject-2");
                npm.AddNamespace("ArtifactObj", "http://cybox.mitre.org/objects#ArtifactObject-2");
                npm.AddNamespace("PacketObj", "http://cybox.mitre.org/objects#PacketObject-2");
                npm.AddNamespace("incident", "http://stix.mitre.org/Incident-1");
                npm.AddNamespace("HTTPSessionObj", "http://cybox.mitre.org/objects#HTTPSessionObject-2");
                npm.AddNamespace("WinCriticalSectionObj", "http://cybox.mitre.org/objects#WinCriticalSectionObject-2");
                npm.AddNamespace("DeviceObj", "http://cybox.mitre.org/objects#DeviceObject-2");
                npm.AddNamespace("WinVolumeObj", "http://cybox.mitre.org/objects#WinVolumeObject-2");
                npm.AddNamespace("UnixProcessObj", "http://cybox.mitre.org/objects#UnixProcessObject-2");
                npm.AddNamespace("MutexObj", "http://cybox.mitre.org/objects#MutexObject-2");
                npm.AddNamespace("scap-core", "http://scap.nist.gov/schema/scap-core/1.0");
                npm.AddNamespace("WinSystemRestoreObj", "http://cybox.mitre.org/objects#WinSystemRestoreObject-2");
                npm.AddNamespace("WinMailslotObj", "http://cybox.mitre.org/objects#WinMailslotObject-2");
                npm.AddNamespace("WinFileObj", "http://cybox.mitre.org/objects#WinFileObject-2");
                npm.AddNamespace("DiskPartitionObj", "http://cybox.mitre.org/objects#DiskPartitionObject-2");
                npm.AddNamespace("ciq", "urn:oasis:names:tc:ciq:xpil:3");
                npm.AddNamespace("WinSystemObj", "http://cybox.mitre.org/objects#WinSystemObject-2");
                npm.AddNamespace("PipeObj", "http://cybox.mitre.org/objects#PipeObject-2");
                npm.AddNamespace("ttp", "http://stix.mitre.org/TTP-1");
                npm.AddNamespace("UnixUserAccountObj", "http://cybox.mitre.org/objects#UnixUserAccountObject-2");
                npm.AddNamespace("WinMemoryPageRegionObj", "http://cybox.mitre.org/objects#WinMemoryPageRegionObject-2");
                npm.AddNamespace("NetworkSubnetObj", "http://cybox.mitre.org/objects#NetworkSubnetObject-2");
                npm.AddNamespace("UnixPipeObj", "http://cybox.mitre.org/objects#UnixPipeObject-2");
                npm.AddNamespace("WinProcessObj", "http://cybox.mitre.org/objects#WinProcessObject-2");
                npm.AddNamespace("ciqAddress", "http://stix.mitre.org/extensions/Address#CIQAddress3.0-1");
                npm.AddNamespace("SemaphoreObj", "http://cybox.mitre.org/objects#SemaphoreObject-2");
                npm.AddNamespace("cvrfVuln", "http://stix.mitre.org/extensions/Vulnerability#CVRF-1");
                npm.AddNamespace("WinEventObj", "http://cybox.mitre.org/objects#WinEventObject-2");
                npm.AddNamespace("EmailMessageObj", "http://cybox.mitre.org/objects#EmailMessageObject-2");
                npm.AddNamespace("WinWaitableTimerObj", "http://cybox.mitre.org/objects#WinWaitableTimerObject-2");
                npm.AddNamespace("WhoisObj", "http://cybox.mitre.org/objects#WhoisObject-2");
                npm.AddNamespace("ProcessObj", "http://cybox.mitre.org/objects#ProcessObject-2");
                npm.AddNamespace("capec", "http://capec.mitre.org/capec-2");
                npm.AddNamespace("capecInstance", "http://stix.mitre.org/extensions/AP#CAPEC2.6-1");
                npm.AddNamespace("genericTM", "http://stix.mitre.org/extensions/TestMechanism#Generic-1");
                npm.AddNamespace("oval", "http://oval.mitre.org/XMLSchema/oval-common-5");
                npm.AddNamespace("WinSemaphoreObj", "http://cybox.mitre.org/objects#WinSemaphoreObject-2");
                npm.AddNamespace("NetworkRouteEntryObj", "http://cybox.mitre.org/objects#NetworkRouteEntryObject-2");
                npm.AddNamespace("stixVocabs", "http://stix.mitre.org/default_vocabularies-1");
                npm.AddNamespace("VolumeObj", "http://cybox.mitre.org/objects#VolumeObject-2");
                npm.AddNamespace("DNSQueryObj", "http://cybox.mitre.org/objects#DNSQueryObject-2");
                npm.AddNamespace("ds", "http://www.w3.org/2000/09/xmldsig#");
                npm.AddNamespace("WinUserAccountObj", "http://cybox.mitre.org/objects#WinUserAccountObject-2");
                npm.AddNamespace("campaign", "http://stix.mitre.org/Campaign-1");
                npm.AddNamespace("snortTM", "http://stix.mitre.org/extensions/TestMechanism#Snort-1");
                npm.AddNamespace("xs", "http://www.w3.org/2001/XMLSchema");
                npm.AddNamespace("PortObj", "http://cybox.mitre.org/objects#PortObject-2");
                npm.AddNamespace("UnixVolumeObj", "http://cybox.mitre.org/objects#UnixVolumeObject-2");
                npm.AddNamespace("maec", "http://maec.mitre.org/XMLSchema/maec-package-2");
                npm.AddNamespace("NetworkSocketObj", "http://cybox.mitre.org/objects#NetworkSocketObject-2");
                npm.AddNamespace("GUIDialogBoxObj", "http://cybox.mitre.org/objects#GUIDialogboxObject-2");
                npm.AddNamespace("LibraryObj", "http://cybox.mitre.org/objects#LibraryObject-2");
                npm.AddNamespace("WinThreadObj", "http://cybox.mitre.org/objects#WinThreadObject-2");
                npm.AddNamespace("cvrf-common", "http://www.icasi.org/CVRF/schema/common/1.1");
                npm.AddNamespace("NetworkConnectionObj", "http://cybox.mitre.org/objects#NetworkConnectionObject-2");
                npm.AddNamespace("ovalTM", "http://stix.mitre.org/extensions/TestMechanism#OVAL5.10-1");
                npm.AddNamespace("tlpMarking", "http://data-marking.mitre.org/extensions/MarkingStructure#TLP-1");
                npm.AddNamespace("WinKernelHookObj", "http://cybox.mitre.org/objects#WinKernelHookObject-2");
                npm.AddNamespace("WinComputerAccountObj", "http://cybox.mitre.org/objects#WinComputerAccountObject-2");
                npm.AddNamespace("dc", "http://purl.org/dc/elements/1.1/");
                npm.AddNamespace("LinuxPackageObj", "http://cybox.mitre.org/objects#LinuxPackageObject-2");
                npm.AddNamespace("sch", "http://purl.oclc.org/dsdl/schematron");
                npm.AddNamespace("yaraTM", "http://stix.mitre.org/extensions/TestMechanism#YARA-1");
                npm.AddNamespace("prod", "http://www.icasi.org/CVRF/schema/prod/1.1");
                npm.AddNamespace("DNSCacheObj", "http://cybox.mitre.org/objects#DNSCacheObject-2");
                npm.AddNamespace("UnixFileObj", "http://cybox.mitre.org/objects#UnixFileObject-2");
                npm.AddNamespace("NetFlowObj", "http://cybox.mitre.org/objects#NetworkFlowObject-2");
                npm.AddNamespace("cyboxVocabs", "http://cybox.mitre.org/default_vocabularies-2");
                npm.AddNamespace("openiocTM", "http://stix.mitre.org/extensions/TestMechanism#OpenIOC2010-1");
                npm.AddNamespace("WinRegistryKeyObj", "http://cybox.mitre.org/objects#WinRegistryKeyObject-2");
                npm.AddNamespace("ProductObj", "http://cybox.mitre.org/objects#ProductObject-2");
                npm.AddNamespace("WinHandleObj", "http://cybox.mitre.org/objects#WinHandleObject-2");
                npm.AddNamespace("oval-var", "http://oval.mitre.org/XMLSchema/oval-variables-5");
                npm.AddNamespace("a", "urn:oasis:names:tc:ciq:xal:3");
                npm.AddNamespace("cvssv2", "http://scap.nist.gov/schema/cvss-v2/1.0");
                npm.AddNamespace("WinEventLogObj", "http://cybox.mitre.org/objects#WinEventLogObject-2");
                npm.AddNamespace("vuln", "http://www.icasi.org/CVRF/schema/vuln/1.1");
                npm.AddNamespace("simpleMarking", "http://data-marking.mitre.org/extensions/MarkingStructure#Simple-1");
                npm.AddNamespace("APIObj", "http://cybox.mitre.org/objects#APIObject-2");
                npm.AddNamespace("genericStructuredCOA", "http://stix.mitre.org/extensions/StructuredCOA#Generic-1");
                npm.AddNamespace("ct", "urn:oasis:names:tc:ciq:ct:3");
                npm.AddNamespace("SystemObj", "http://cybox.mitre.org/objects#SystemObject-2");
                npm.AddNamespace("DNSRecordObj", "http://cybox.mitre.org/objects#DNSRecordObject-2");
                npm.AddNamespace("stixCommon", "http://stix.mitre.org/common-1");
                npm.AddNamespace("WinServiceObj", "http://cybox.mitre.org/objects#WinServiceObject-2");
                npm.AddNamespace("cyboxCommon", "http://cybox.mitre.org/common-2");
                npm.AddNamespace("cpe", "http://cpe.mitre.org/language/2.0");
                npm.AddNamespace("FileObj", "http://cybox.mitre.org/objects#FileObject-2");
                npm.AddNamespace("GUIWindowObj", "http://cybox.mitre.org/objects#GUIWindowObject-2");
                npm.AddNamespace("WinPrefetchObj", "http://cybox.mitre.org/objects#WinPrefetchObject-2");
                npm.AddNamespace("WinKernelObj", "http://cybox.mitre.org/objects#WinKernelObject-2");
                npm.AddNamespace("stix", "http://stix.mitre.org/stix-1");
                npm.AddNamespace("cybox", "http://cybox.mitre.org/cybox-2");
                npm.AddNamespace("indicator", "http://stix.mitre.org/Indicator-2");
                npm.AddNamespace("marking", "http://data-marking.mitre.org/Marking-1");
                npm.AddNamespace("URIObj", "http://cybox.mitre.org/objects#URIObject-2");
                npm.AddNamespace("ta", "http://stix.mitre.org/ThreatActor-1");
                npm.AddNamespace("MemoryObj", "http://cybox.mitre.org/objects#MemoryObject-2");
                npm.AddNamespace("WinTaskObj", "http://cybox.mitre.org/objects#WinTaskObject-2");
                npm.AddNamespace("SocketAddressObj", "http://cybox.mitre.org/objects#SocketAddressObject-1");
                npm.AddNamespace("WinMutexObj", "http://cybox.mitre.org/objects#WinMutexObject-2");
                npm.AddNamespace("et", "http://stix.mitre.org/ExploitTarget-1");
                npm.AddNamespace("WinExecutableFileObj", "http://cybox.mitre.org/objects#WinExecutableFileObject-2");
                npm.AddNamespace("WinNetworkShareObj", "http://cybox.mitre.org/objects#WinNetworkShareObject-2");
                npm.AddNamespace("LinkObj", "http://cybox.mitre.org/objects#LinkObject-1");
                npm.AddNamespace("NetworkRouteObj", "http://cybox.mitre.org/objects#NetworkRouteObject-2");
                npm.AddNamespace("xnl", "urn:oasis:names:tc:ciq:xnl:3");
                npm.AddNamespace("X509CertificateObj", "http://cybox.mitre.org/objects#X509CertificateObject-2");
                npm.AddNamespace("maecInstance", "http://stix.mitre.org/extensions/Malware#MAEC4.0-1");
                npm.AddNamespace("UnixNetworkRouteEntryObj", "http://cybox.mitre.org/objects#UnixNetworkRouteEntryObject-2");
                npm.AddNamespace("oval-def", "http://oval.mitre.org/XMLSchema/oval-definitions-5");
                npm.AddNamespace("ciqIdentity", "http://stix.mitre.org/extensions/Identity#CIQIdentity3.0-1");
                npm.AddNamespace("AccountObj", "http://cybox.mitre.org/objects#AccountObject-2");
                npm.AddNamespace("xlink", "http://www.w3.org/1999/xlink");

                Session.Add("npm", npm);

                loadFields();
            }
            catch (DirectoryNotFoundException e)
            {
                lbl_e.Text = "Report is still being processed";
                lbl_e.Visible = true;
                Panel1.Visible = false;
            }
        }

        protected void loadXpathPanel()
        {
            string[] xpathArr = xpath.Split('/').Where(x => !string.IsNullOrEmpty(x)).ToArray();
            for (int i = 0; i < xpathArr.Length; i++)
            {
                Label separatorLabel = new Label();
                separatorLabel.Text = "&nbsp;/&nbsp;";
                string s = xpathArr[i];
                Button pathButton = new Button();
                pathButton.Text = s;
                pathButton.CssClass = "btn btn-info btn-xs";
                string url = "editor.aspx?md5=" + md5 + "&xpath=";
                for (int j = 0; j <= i; j++)
                {
                    url += "/" + xpathArr[j];
                }
                //pathButton.PostBackUrl = url;
                pathButton.Click += (sa, ea) =>
                {
                    Response.Redirect(url);
                };

                xpathPanel.Controls.Add(separatorLabel);
                xpathPanel.Controls.Add(pathButton);
            }
        }

        protected void loadFields()
        {
            /***** GET NODE *****/
            node = stix.SelectSingleNode(xpath, npm);
            Session.Add("node", node);

            /***** POPULATE HEADER *****/
            if (xpath.Equals("/"))
            {

                nodeNameLabel.Text = "Root";
            }
            else
            {
                string[] arr = xpath.Split('/');
                nodeNameLabel.Text = arr[arr.Length - 1];
            }

            /***** POPULATE CHILD NODE *****/
            List<ChildNode> fullNodeList = getChild(node.Name);
            if (fullNodeList.Count > 0)
            {
                foreach (XmlNode childNode in node)
                {
                    if (childNode.NodeType == XmlNodeType.Element)
                    {
                        ChildNode cn = new ChildNode();
                        cn.NodeName = childNode.Name;
                        cn.Xpath = getPath(childNode);
                        if (childNode.SelectSingleNode("./@lastusermod", npm) != null)
                        {
                            attributeValue = Regex.Split(childNode.SelectSingleNode("./@lastusermod", npm).Value, "::");
                            cn.ModType = int.Parse(attributeValue[0]);
                            cn.UserId = attributeValue[1];
                            cn.ModDateTime = DateTime.Parse(attributeValue[2]);
                        }
                        childNodeList.Add(cn);
                    }
                }

                Session.Add("childNodeList", childNodeList);
                childNodeListView.DataSource = childNodeList;
                childNodeListView.DataBind();

                string minOccur = getMinOccurChildNode(childNodeList, fullNodeList);
                if (!minOccur.Equals(""))
                {
                    Page.ClientScript.RegisterStartupScript(this.GetType(), "CallMyFunction", "$(window).load(function () { $('#myModal').modal('show'); });", true);
                    requiredChildNodesLiteral.Text = minOccur;
                }
            }
            else
            {
                childNodeListView.Visible = false;
                childNodeListView.Enabled = false;
            }

            /***** POPULATE VALUE *****/
            string datatype = getValue(node.Name);
            if (datatype != null)
            {
                Value v = new Value();
                v.Val = node.InnerText;
                v.Datatype = datatype;
                if (node.SelectSingleNode("./@lastusermod", npm) != null)
                {
                    attributeValue = Regex.Split(node.SelectSingleNode("./@lastusermod", npm).Value, "::");
                    v.ModType = int.Parse(attributeValue[0]);
                    v.UserId = attributeValue[1];
                    v.ModDateTime = DateTime.Parse(attributeValue[2]);
                }
                valueList.Add(v);

                Session.Add("valueList", valueList);
                valueListView.DataSource = valueList;
                valueListView.DataBind();
            }
            else
            {
                valueListView.Visible = false;
                valueListView.Enabled = false;
            }

            /***** POPULATE ATTRIBUTE *****/
            newAttributeList = getAttribute(node.Name);
            Session.Add("newAttributeList", newAttributeList);
            if (newAttributeList.Count > 0)
            {
                if (node.Attributes != null)
                {
                    foreach (XmlAttribute attribute in node.Attributes)
                    {
                        if (!attribute.Name.Equals("lastusermod"))
                        {
                            Attribute a = new Attribute();
                            a.Name = attribute.Name;
                            a.Val = attribute.Value;
                            if (node.SelectSingleNode("./@lastusermod", npm) != null)
                            {
                                attributeValue = Regex.Split(node.SelectSingleNode("./@lastusermod", npm).Value, "::");
                                a.ModType = int.Parse(attributeValue[0]);
                                a.UserId = attributeValue[1];
                                a.ModDateTime = DateTime.Parse(attributeValue[2]);
                            }
                            attributeList.Add(a);
                        }
                    }
                }

                Session.Add("attributeList", attributeList);
                attributeListView.DataSource = attributeList;
                attributeListView.DataBind();
            }
            else
            {
                attributeListView.Visible = false;
                attributeListView.Enabled = false;
            }

        }

        protected string getMinOccurChildNode(List<ChildNode> childNodeList, List<ChildNode> fullNodeList)
        {
            string minOccurString = "";
            foreach (ChildNode c in childNodeList)
            {
                foreach (ChildNode fc in fullNodeList)
                {
                    if (c.NodeName.Equals(fc.NodeName))
                    {
                        fc.MinOccur--;
                    }
                }
            }

            for (int i = fullNodeList.Count - 1; i > -1; i--)
            {
                if (fullNodeList[i].MinOccur < 1)
                {
                    fullNodeList.RemoveAt(i);
                }
            }

            foreach (ChildNode c in fullNodeList)
            {
                minOccurString += "<li>" + c.NodeName + "(" + c.MinOccur + ")" + "</li>";
            }

            if (fullNodeList.Count > 0)
            {
                minOccurString = "<ul>" + minOccurString + "</ul>";
            }

            return minOccurString;
        }

        protected List<string> getMaxOccurChildNode(List<ChildNode> childNodeList, List<ChildNode> fullNodeList)
        {
            List<string> childNodeNameList = new List<string>();
            foreach (ChildNode c in childNodeList)
            {
                foreach (ChildNode fc in fullNodeList)
                {
                    if (c.NodeName.Equals(fc.NodeName))
                    {
                        fc.MaxOccur--;
                    }
                }
            }

            foreach (ChildNode c in fullNodeList)
            {
                if (c.MaxOccur > 0)
                {
                    childNodeNameList.Add(c.NodeName);
                }
            }

            return childNodeNameList;
        }

        protected string getPath(XmlNode pNode)
        {
            string path = "";
            while (pNode.NodeType != XmlNodeType.Document)
            {
                int sibCount = 0;
                XmlNode pn = pNode;
                while (pn != null)
                {
                    if (pNode.Name.Equals(pn.Name))
                    {
                        sibCount++;
                    }
                    pn = pn.PreviousSibling;
                }
                if (sibCount > 1)
                {
                    path = "/" + pNode.Name + "[" + sibCount + "]" + path;
                }
                else
                {
                    path = "/" + pNode.Name + path;
                }
                pNode = pNode.ParentNode;
            }
            return path;
        }

        protected string getUrl(object obj)
        {
            return "editor.aspx?md5=" + md5 + "&xpath=" + (string)obj;
        }

        public XmlNode setLastUserMod(XmlNode node, int modType)
        {
            validateMembership();
            //modType 0-update 1-insert
            node.Attributes.Remove(node.Attributes["lastusermod"]);
            XmlAttribute attribute = stix.CreateAttribute("lastusermod");
            attribute.Value = modType + "::" + Membership.GetUser().ProviderUserKey.ToString() + "::" + DateTime.Now;
            node.Attributes.Append(attribute);
            return node;
        }

        public string setLastUserModStyle(String value)
        {
            int modType = int.Parse(value);
            switch (modType)
            {
                case 1:
                    return "edit";
                case 2:
                    return "insert";
                default:
                    return "";
            }
        }

        /***** CHILD NODE ACTIONS *****/

        protected void childNodeListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            childNodeListView.DataSource = childNodeList;
            childNodeListView.EditIndex = -1;
            childNodeListView.InsertItemPosition = InsertItemPosition.None;
            childNodeListView.DataBind();
        }

        protected void childNodeListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string nodeName = ((DropDownList)childNodeListView.InsertItem.FindControl("childNodeDropDownList")).SelectedItem.Text;
            XmlNode newNode = stix.CreateNode(XmlNodeType.Element, nodeName, getNameSpace(nodeName));
            newNode = setLastUserMod(newNode, 2);
            node.AppendChild(newNode);
            stix.Save(path);
            Response.Redirect("editor.aspx?md5=" + md5 + "&xpath=" + xpath);
        }

        protected void ChildNodeInsertButton_Click(object sender, EventArgs e)
        {
            childNodeListView.DataSource = childNodeList;
            childNodeListView.EditIndex = -1;
            childNodeListView.InsertItemPosition = InsertItemPosition.FirstItem;
            childNodeListView.DataBind();

            DropDownList childNodeDropDownList = (DropDownList)childNodeListView.InsertItem.FindControl("childNodeDropDownList");
            List<ChildNode> newChildNodeList = getChild(node.Name);

            List<string> newChildNodeStringList = getMaxOccurChildNode(childNodeList, newChildNodeList);

            //asd
            //List<string> newChildNodeStringList = new List<string>();
            //foreach (ChildNode c in newChildNodeList)
            //{
            //    newChildNodeStringList.Add(c.NodeName);
            //}
            childNodeDropDownList.DataSource = newChildNodeStringList;
            childNodeDropDownList.DataBind();
        }

        /***** VALUE ACTIONS *****/
        protected void valueListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            valueListView.DataSource = valueList;
            valueListView.EditIndex = e.NewEditIndex;
            valueListView.DataBind();
        }

        protected void valueListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            string value = ((TextBox)valueListView.EditItem.FindControl("valueTextBox")).Text;
            if (validateGenericShit(value, valueList[0].Datatype))
            {
                node = setLastUserMod(node, 1);
                node.InnerText = value;
                stix.Save(path);
                Response.Redirect("editor.aspx?md5=" + md5 + "&xpath=" + xpath);
            }
            else
            {
                Label validatorLabel = (Label)valueListView.EditItem.FindControl("validatorLabel");
                validatorLabel.Attributes["class"] = "alert alert-danger";
            }
        }

        protected void valueListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            valueListView.DataSource = valueList;
            valueListView.EditIndex = -1;
            valueListView.DataBind();
        }

        protected bool validateGenericShit(String value, String datatype)
        {
            int int_num;
            float float_num;
            bool bool_num;
            DateTime datetime;
            IPAddress address;
            long long_num;
            double double_num;
            if (value.Equals("") || value == null)
            {
                return false;
            }
            switch (datatype)
            {
                case "xs:string":
                case "xs:QName":
                case "stixCommon:ControlledVocabularyStringType":
                case "stixCommon:StructuredTextType":
                case "cyboxCommon:ControlledVocabularyStringType":
                case "cyboxCommon:StructuredTextType":
                case "cyboxCommon:StringObjectPropertyType":
                case "ProcessObj:ProcessStatusType":
                case "ArtifactObj:RawArtifactType":
                    return true;
                case "xs:int":
                case "xs:integer":
                    return int.TryParse(value, out int_num);
                case "xs:positiveInteger":
                    if ((int.TryParse(value, out int_num)) && (int_num >= 0))
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                case "xs:float":
                case "cyboxCommon:FloatObjectPropertyType":
                    return float.TryParse(value, out float_num);
                case "xs:boolean":
                    return bool.TryParse(value, out bool_num);
                case "xs:dateTime":
                case "cyboxCommon:DateTimeObjectPropertyType":
                    return DateTime.TryParse(value, out datetime);
                case "xs:anyURI":
                    return Uri.IsWellFormedUriString(value, UriKind.Absolute);
                case "AddressObj:AddressObjectType":
                    return IPAddress.TryParse(value, out address);
                case "PortObj:PortObjectType":
                    if (int.TryParse(value, out int_num))
                    {
                        if ((1 <= int_num) && (int_num <= 65535))
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        return false;
                    }
                case "xs:long":
                case "cyboxCommon:UnsignedLongObjectPropertyType":
                    return long.TryParse(value, out long_num);
                case "xs:hexBinary":
                case "cyboxCommon:HexBinaryObjectPropertyType":
                case "cyboxCommon:SimpleHashValueType":
                    if (value.StartsWith("0x", StringComparison.CurrentCultureIgnoreCase))
                    {
                        value = value.Substring(2);
                    }

                    return System.Text.RegularExpressions.Regex.IsMatch(value, @"\A\b[0-9a-fA-F]+\b\Z");
                case "xs:double":
                case "cyboxCommon:DoubleObjectPropertyType":
                    return double.TryParse(value, out double_num);
                default:
                    return false;
            }
        }

        protected string getValidatorText(string datatype)
        {
            switch (datatype)
            {
                case "xs:string":
                case "xs:QName":
                case "stixCommon:ControlledVocabularyStringType":
                case "stixCommon:StructuredTextType":
                case "cyboxCommon:ControlledVocabularyStringType":
                case "cyboxCommon:StructuredTextType":
                case "cyboxCommon:StringObjectPropertyType":
                case "ProcessObj:ProcessStatusType":
                case "ArtifactObj:RawArtifactType":
                    return "Please enter a string e.g. Hello";
                case "xs:int":
                case "xs:integer":
                    return "Please enter an integer e.g. 123";
                case "xs:positiveInteger":
                    return "Please enter a positive integer e.g. 123";
                case "xs:float":
                case "cyboxCommon:FloatObjectPropertyType":
                    return "Please enter a float e.g. 3.0";
                case "xs:boolean":
                    return "Please enter a boolean e.g. true";
                case "xs:dateTime":
                case "cyboxCommon:DateTimeObjectPropertyType":
                    return "Please enter a datetime e.g. 2012=01-01T10:30:00";
                case "xs:anyURI":
                    return "Please enter an uri";
                case "AddressObj:AddressObjectType e.g. google.com":
                    return "Please enter an IPv4 or IPv6 address e.g. 192.168.0.1";
                case "PortObj:PortObjectType":
                    return "Please enter a port number e.g. 80";
                case "xs:long":
                case "cyboxCommon:UnsignedLongObjectPropertyType":
                    return "Please enter a long e.g. 3";
                case "xs:hexBinary":
                case "cyboxCommon:HexBinaryObjectPropertyType":
                case "cyboxCommon:SimpleHashValueType":
                    return "Please enter a hexadecimal e.g. 12AD";
                case "xs:double":
                case "cyboxCommon:DoubleObjectPropertyType":
                    return "Please enter a double e.g. 3.01";
                default:
                    return "Please enter a value";
            }
        }

        /***** ATTRIBUTE ACTIONS *****/
        protected void attributeListView_ItemEditing(object sender, ListViewEditEventArgs e)
        {
            attributeListView.DataSource = attributeList;
            attributeListView.EditIndex = e.NewEditIndex;
            attributeListView.DataBind();

            newAttributeList = getAttribute(node.Name);
            Session.Add("newAttributeList", newAttributeList);
            Label validatorLabel = (Label)attributeListView.EditItem.FindControl("validatorLabel");
            string name = attributeList[e.NewEditIndex].Datatype;
            validatorLabel.Text = getValidatorText(name);

        }

        protected void attributeListView_ItemUpdating(object sender, ListViewUpdateEventArgs e)
        {
            int index = attributeListView.EditItem.DisplayIndex;

            string ns = "";
            string name = ((Label)attributeListView.EditItem.FindControl("nameLabel")).Text;
            string value = ((TextBox)attributeListView.EditItem.FindControl("valueTextBox")).Text;

            if (validateGenericShit(value, findAttributeDatatype(name)))
            {
                node = setLastUserMod(node, 1);
                node.Attributes.Remove(node.Attributes[name]);
                //XmlAttribute xsiTypeAttribute = stix.CreateAttribute("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance");
                XmlAttribute attribute = stix.CreateAttribute(name, ns);
                attribute.Value = value;
                node.Attributes.Append(attribute);

                stix.Save(path);

                Response.Redirect("editor.aspx?md5=" + md5 + "&xpath=" + xpath);
            }
            else
            {
                Label validatorLabel = (Label)attributeListView.EditItem.FindControl("validatorLabel");
                validatorLabel.Attributes["class"] = "alert alert-danger";
            }
        }

        protected string findAttributeDatatype(string attribute_name)
        {
            //foreach (Attribute a in attributeList)
            //{
            //    if (attribute_name.Equals(a.Name))
            //    {
            //        return a.Datatype;
            //    }
            //}
            foreach (Attribute a in newAttributeList)
            {
                if (attribute_name.Equals(a.Name))
                {
                    return a.Datatype;
                }
            }
            return null;
        }

        protected string getSelectedAttribute()
        {
            return ((DropDownList)attributeListView.InsertItem.FindControl("attributeDropDownList")).SelectedItem.Text;
        }

        protected void attributeListView_ItemCanceling(object sender, ListViewCancelEventArgs e)
        {
            attributeListView.DataSource = attributeList;
            attributeListView.EditIndex = -1;
            attributeListView.InsertItemPosition = InsertItemPosition.None;
            attributeListView.DataBind();
        }

        protected void attributeListView_ItemInserting(object sender, ListViewInsertEventArgs e)
        {
            string name = ((DropDownList)attributeListView.InsertItem.FindControl("attributeDropDownList")).SelectedItem.Text;
            string value = ((TextBox)attributeListView.InsertItem.FindControl("valueTextBox")).Text;
            string ns = ""; //TODO
            if (validateGenericShit(value, findAttributeDatatype(name)))
            {
                node = setLastUserMod(node, 2);
                node.Attributes.Remove(node.Attributes[name]);
                //XmlAttribute xsiTypeAttribute = stix.CreateAttribute("xsi", "type", "http://www.w3.org/2001/XMLSchema-instance");
                XmlAttribute attribute = stix.CreateAttribute(name, ns);
                attribute.Value = value;
                node.Attributes.Append(attribute);

                stix.Save(path);

                Response.Redirect("editor.aspx?md5=" + md5 + "&xpath=" + xpath);
            }
            else
            {
                Label validatorLabel = (Label)attributeListView.InsertItem.FindControl("validatorLabel");
                validatorLabel.Attributes["class"] = "alert alert-danger";
            }
        }

        protected void AttributesInsertButton_Click(object sender, EventArgs e)
        {
            attributeListView.DataSource = attributeList;
            attributeListView.EditIndex = -1;
            attributeListView.InsertItemPosition = InsertItemPosition.FirstItem;
            attributeListView.DataBind();

            DropDownList attributeDropDownList = (DropDownList)attributeListView.InsertItem.FindControl("attributeDropDownList");
            List<Attribute> newAttributeList = getAttribute(node.Name);
            List<string> attributeNameList = new List<string>();
            foreach (Attribute a in newAttributeList)
            {
                attributeNameList.Add(a.Name);
            }
            attributeDropDownList.DataSource = attributeNameList;
            attributeDropDownList.DataBind();

            attributeDropDownList.SelectedIndex = 0;
        }

        protected void attributeDropDownList_SelectedIndexChanged(object sender, EventArgs e)
        {
            DropDownList attributeDropDownList = (DropDownList)sender;
            Label validatorLabel = (Label)attributeListView.InsertItem.FindControl("validatorLabel");
            if (attributeDropDownList.SelectedItem == null)
            {
                validatorLabel.Text = getValidatorText(newAttributeList[0].Datatype);
            }
            else
            {
                string name = attributeDropDownList.SelectedItem.Text;
                foreach (Attribute a in newAttributeList)
                {
                    if (a.Name.Equals(name))
                    {
                        validatorLabel.Text = getValidatorText(a.Datatype);
                        break;
                    }
                }
            }
        }

        protected XmlDocument getSchema(string parentNode)
        {
            string name_space = parentNode.Split(':')[0];
            XmlDocument schema = new XmlDocument();
            try
            {
                string schema_path = getSchemaPath(name_space);
                //Session.Add("schema_path", schema_path);
                schema.Load(Server.MapPath(schema_path));
                //Session.Add("schema", schema);

                schema_ns = new XmlNamespaceManager(schema.NameTable);
                schema_ns.AddNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                schema_ns.AddNamespace("ds", "http://www.w3.org/2000/09/xmldsig#");
                schema_ns.AddNamespace("xs", "http://www.w3.org/2001/XMLSchema");
                Session.Add("schema_ns", schema_ns);
            }
            catch (Exception e)
            {
                return null;
            }
            return schema;
        }

        protected List<ChildNode> getChild(string parentNode)
        {
            List<ChildNode> childList = new List<ChildNode>();

            //get relevant schema from namespace
            XmlDocument schema;
            schema = getSchema(parentNode);

            if ((parentNode.Equals("cybox:Properties")) && (childNodeList.Count == 0))
            {
                childList = getChildForCyboxProperties();
                return childList;
            }

            //populate childArr
            string nodeName;
            try
            {
                nodeName = parentNode.Split(':')[1];
            }
            catch (IndexOutOfRangeException e)
            {
                ChildNode c = new ChildNode();
                c.NodeName = "stix:STIX_Package";
                c.MinOccur = 1;
                childList.Add(c);
                return childList;
            }
            XmlNode schema_node = schema.SelectSingleNode(".//xs:element[@name='" + nodeName + "']", schema_ns);

            string type = schema_node.SelectSingleNode("./@type", schema_ns).Value;
            string ns = type.Split(':')[0];

            //check for http ... xsd in documentation
            XmlNode ext_node = checkExternalSchema(schema_node);
            if (ext_node != null)
            {
                schema_node = ext_node;
                schema_node = schema_node.SelectSingleNode(".//xs:extension[@base='" + type + "']", schema_ns);
                ns = getPrefix(schema_node.OwnerDocument);
            }
            else
            {
                if ((ns.Equals("xs")) || (type.Equals("stixCommon:ControlledVocabularyStringType")) || (type.Equals("stixCommon:StructuredTextType")) || (type.Equals("cyboxCommon:ControlledVocabularyStringType")) || (type.Equals("cyboxCommon:StructuredTextType")) || (type.Equals("cyboxCommon:StringObjectPropertyType")) || (type.Equals("ProcessObj:ProcessStatusType")) || (type.Equals("cyboxCommon:DateTimeObjectPropertyType")) || (type.Equals("AddressObj:AddressObjectType")) || (type.Equals("PortObj:PortObjectType")) || (type.Equals("cyboxCommon:UnsignedLongObjectPropertyType")) || (type.Equals("cyboxCommon:HexBinaryObjectPropertyType")) || (type.Equals("cyboxCommon:DoubleObjectPropertyType")) || (type.Equals("cyboxCommon:SimpleHashValueType")) || (type.Equals("cyboxCommon:FloatObjectPropertyType")) || (type.Equals("ArtifactObj:RawArtifactType")))
                {
                    return childList;
                }
                else
                {
                    schema = getSchema(type);
                    type = type.Split(':')[1];
                    schema_node = schema.SelectSingleNode(".//xs:complexType[@name='" + type + "']", schema_ns);
                    ns = getPrefix(schema_node.OwnerDocument);
                }
            }

            XmlNodeList newChildNodeList = schema_node.SelectNodes(".//xs:element", schema_ns);
            foreach (XmlNode childNode in newChildNodeList)
            {
                ChildNode c = new ChildNode();
                if (childNode.SelectSingleNode("./@name", schema_ns) != null)
                {
                    c.NodeName = ns + ":" + childNode.SelectSingleNode("./@name", schema_ns).Value;

                }
                else if (childNode.SelectSingleNode("./@ref", schema_ns) != null)
                {
                    c.NodeName = childNode.SelectSingleNode("./@ref", schema_ns).Value;
                }

                if (childNode.SelectSingleNode("./@minOccurs", schema_ns) != null)
                {
                    c.MinOccur = int.Parse(childNode.SelectSingleNode("./@minOccurs", schema_ns).Value);
                }
                else
                {
                    c.MinOccur = 1;
                }

                int maxOccurs;
                if (childNode.SelectSingleNode("./@maxOccurs", schema_ns) != null)
                {
                    if (int.TryParse(childNode.SelectSingleNode("./@maxOccurs", schema_ns).Value, out maxOccurs) == true)
                    {
                        c.MaxOccur = int.Parse(childNode.SelectSingleNode("./@maxOccurs", schema_ns).Value);
                    }
                    else if (childNode.SelectSingleNode("./@maxOccurs", schema_ns).Value.Equals("unbounded"))
                    {
                        c.MaxOccur = int.MaxValue;
                    }
                }
                else
                {
                    c.MaxOccur = 1;
                }
                childList.Add(c);
            }
            return childList;
        }

        protected List<ChildNode> getChildForCyboxProperties()
        {
            List<ChildNode> childList = new List<ChildNode>();

            string dir = Server.MapPath("~/schema/cybox_v2.0.1/objects/");
            DirectoryInfo d = new DirectoryInfo(dir);
            XmlDocument propertiesObject = new XmlDocument();

            foreach (FileInfo file in d.GetFiles("*.xsd"))
            {
                String objectPath = dir + file.Name;
                propertiesObject.Load(objectPath);
                string prefix = propertiesObject.SelectSingleNode("/xs:schema/xs:element/@type", npm).Value.Split(':')[0];
                string name = propertiesObject.SelectSingleNode("/xs:schema/xs:element/@name", npm).Value;
                ChildNode c = new ChildNode();
                c.NodeName = prefix + ":" + name;
                c.MinOccur = 0;
                c.MaxOccur = 1;
                childList.Add(c);
            }

            return childList;
        }

        //check for http ... xsd in node>documentation
        protected XmlDocument checkExternalSchema(XmlNode node)
        {
            string doc = node.SelectSingleNode(".//xs:annotation/xs:documentation", schema_ns).InnerText;
            int start = doc.LastIndexOf("/");
            int end = doc.LastIndexOf("xsd");

            if ((start < 0) || (end < 0) || (doc == null) || (doc.Equals("")))
            {
                return null;
            }

            doc = doc.Substring(start + 1, end - start + 2);

            XmlDocument schema = new XmlDocument();
            try
            {
                string schema_path = getSchemaPath(doc);
                //Session.Add("schema_path", schema_path);
                schema.Load(Server.MapPath(schema_path));
                //Session.Add("schema", schema);

                schema_ns = new XmlNamespaceManager(schema.NameTable);
                schema_ns.AddNamespace("xsi", "http://www.w3.org/2001/XMLSchema-instance");
                schema_ns.AddNamespace("ds", "http://www.w3.org/2000/09/xmldsig#");
                schema_ns.AddNamespace("xs", "http://www.w3.org/2001/XMLSchema");
                Session.Add("schema_ns", schema_ns);
            }
            catch (Exception e)
            {
                return null;
            }
            return schema;
        }

        protected string getPrefix(XmlDocument schema)
        {
            return schema.SelectSingleNode("/xs:schema/xs:element/@type", schema_ns).Value.Split(':')[0];
        }

        // returns type e.g. xs:string xs:datetime
        protected string getValue(string parentNode)
        {
            List<string> childList = new List<string>();

            //get relevant schema from namespace
            XmlDocument schema;
            schema = getSchema(parentNode);

            //populate childArr
            string nodeName;
            try
            {
                nodeName = parentNode.Split(':')[1];
            }
            catch (IndexOutOfRangeException e)
            {
                return null;
            }
            XmlNode schema_node = schema.SelectSingleNode(".//xs:element[@name='" + nodeName + "']", schema_ns);
            string type = schema_node.SelectSingleNode("./@type", schema_ns).Value;
            string ns = type.Split(':')[0];
            if ((ns.Equals("xs")) || (type.Equals("stixCommon:ControlledVocabularyStringType")) || (type.Equals("stixCommon:StructuredTextType")) || (type.Equals("cyboxCommon:ControlledVocabularyStringType")) || (type.Equals("cyboxCommon:StructuredTextType")) || (type.Equals("cyboxCommon:StringObjectPropertyType")) || (type.Equals("ProcessObj:ProcessStatusType")) || (type.Equals("cyboxCommon:DateTimeObjectPropertyType")) || (type.Equals("AddressObj:AddressObjectType")) || (type.Equals("PortObj:PortObjectType")) || (type.Equals("cyboxCommon:UnsignedLongObjectPropertyType")) || (type.Equals("cyboxCommon:HexBinaryObjectPropertyType")) || (type.Equals("cyboxCommon:DoubleObjectPropertyType")) || (type.Equals("cyboxCommon:SimpleHashValueType")) || (type.Equals("cyboxCommon:FloatObjectPropertyType")) || (type.Equals("ArtifactObj:RawArtifactType")))
            {
                return type;
            }
            return null;
        }

        protected List<Attribute> getAttribute(string parentNode)
        {
            newAttributeList = new List<Attribute>();

            //get relevant schema from namespace
            XmlDocument schema;
            schema = getSchema(parentNode);

            string nodeName;
            try
            {
                nodeName = parentNode.Split(':')[1];
            }
            catch (IndexOutOfRangeException e)
            {
                return newAttributeList;
            }

            XmlNode schema_node = schema.SelectSingleNode(".//xs:element[@name='" + nodeName + "']", schema_ns);

            string type = schema_node.SelectSingleNode("./@type", schema_ns).Value;
            string ns = type.Split(':')[0];

            //check for http ... xsd in documentation
            XmlNode ext_node = checkExternalSchema(schema_node);
            if (ext_node != null)
            {
                schema_node = ext_node;
                schema_node = schema_node.SelectSingleNode(".//xs:extension[@base='" + type + "']", schema_ns);
                ns = getPrefix(schema_node.OwnerDocument);
            }
            else
            {
                if ((ns.Equals("xs")) || (type.Equals("stixCommon:ControlledVocabularyStringType")) || (type.Equals("stixCommon:StructuredTextType")) || (type.Equals("cyboxCommon:ControlledVocabularyStringType")) || (type.Equals("cyboxCommon:StructuredTextType")) || (type.Equals("cyboxCommon:StringObjectPropertyType")) || (type.Equals("ProcessObj:ProcessStatusType")) || (type.Equals("cyboxCommon:DateTimeObjectPropertyType")) || (type.Equals("AddressObj:AddressObjectType")) || (type.Equals("PortObj:PortObjectType")) || (type.Equals("cyboxCommon:UnsignedLongObjectPropertyType")) || (type.Equals("cyboxCommon:HexBinaryObjectPropertyType")) || (type.Equals("cyboxCommon:DoubleObjectPropertyType")) || (type.Equals("cyboxCommon:SimpleHashValueType")) || (type.Equals("cyboxCommon:FloatObjectPropertyType")) || (type.Equals("ArtifactObj:RawArtifactType")))
                {
                    return newAttributeList;
                }
                else
                {
                    schema = getSchema(type);
                    type = type.Split(':')[1];
                    schema_node = schema.SelectSingleNode(".//xs:complexType[@name='" + type + "']", schema_ns);
                    ns = getPrefix(schema_node.OwnerDocument);
                }
            }

            XmlNodeList schemaNodeList = schema_node.SelectNodes(".//xs:attribute", schema_ns);
            foreach (XmlNode childNode in schemaNodeList)
            {
                if ((childNode.SelectSingleNode("./@name", schema_ns) != null) && (childNode.SelectSingleNode("./@type", schema_ns) != null))
                {
                    Attribute a = new Attribute();
                    a.Name = childNode.SelectSingleNode("./@name", schema_ns).Value;
                    a.Datatype = childNode.SelectSingleNode("./@type", schema_ns).Value;
                    newAttributeList.Add(a);
                }
            }

            return newAttributeList;
        }

        protected void validateMembership()
        {
            if (Membership.GetUser() == null)
            {
                Response.Redirect("login.aspx");
            }
        }


        protected string getNameSpace(string parentNode)
        {
            string prefix = parentNode.Split(':')[0];
            switch (prefix)
            {
                case "CodeObj":
                    return "http://cybox.mitre.org/objects#CodeObject-2";
                case "ioc-tr":
                    return "http://schemas.mandiant.com/2010/ioc/TR/";
                case "GUIObj":
                    return "http://cybox.mitre.org/objects#GUIObject-2";
                case "ioc":
                    return "http://schemas.mandiant.com/2010/ioc";
                case "WinNetworkRouteEntryObj":
                    return "http://cybox.mitre.org/objects#WinNetworkRouteEntryObject-2";
                case "WinDriverObj":
                    return "http://cybox.mitre.org/objects#WinDriverObject-2";
                case "PDFFileObj":
                    return "http://cybox.mitre.org/objects#PDFFileObject-1";
                case "xsi":
                    return "http://www.w3.org/2001/XMLSchema-instance";
                case "DiskObj":
                    return "http://cybox.mitre.org/objects#DiskObject-2";
                case "UserAccountObj":
                    return "http://cybox.mitre.org/objects#UserAccountObject-2";
                case "CustomObj":
                    return "http://cybox.mitre.org/objects#CustomObject-1";
                case "coa":
                    return "http://stix.mitre.org/CourseOfAction-1";
                case "AddressObj":
                    return "http://cybox.mitre.org/objects#AddressObject-2";
                case "UserSessionObj":
                    return "http://cybox.mitre.org/objects#UserSessionObject-2";
                case "cvrf":
                    return "http://www.icasi.org/CVRF/schema/cvrf/1.1";
                case "WinPipeObj":
                    return "http://cybox.mitre.org/objects#WinPipeObject-2";
                case "ArtifactObj":
                    return "http://cybox.mitre.org/objects#ArtifactObject-2";
                case "PacketObj":
                    return "http://cybox.mitre.org/objects#PacketObject-2";
                case "incident":
                    return "http://stix.mitre.org/Incident-1";
                case "HTTPSessionObj":
                    return "http://cybox.mitre.org/objects#HTTPSessionObject-2";
                case "WinCriticalSectionObj":
                    return "http://cybox.mitre.org/objects#WinCriticalSectionObject-2";
                case "DeviceObj":
                    return "http://cybox.mitre.org/objects#DeviceObject-2";
                case "WinVolumeObj":
                    return "http://cybox.mitre.org/objects#WinVolumeObject-2";
                case "UnixProcessObj":
                    return "http://cybox.mitre.org/objects#UnixProcessObject-2";
                case "MutexObj":
                    return "http://cybox.mitre.org/objects#MutexObject-2";
                case "scap-core":
                    return "http://scap.nist.gov/schema/scap-core/1.0";
                case "WinSystemRestoreObj":
                    return "http://cybox.mitre.org/objects#WinSystemRestoreObject-2";
                case "WinMailslotObj":
                    return "http://cybox.mitre.org/objects#WinMailslotObject-2";
                case "WinFileObj":
                    return "http://cybox.mitre.org/objects#WinFileObject-2";
                case "DiskPartitionObj":
                    return "http://cybox.mitre.org/objects#DiskPartitionObject-2";
                case "ciq":
                    return "urn:oasis:names:tc:ciq:xpil:3";
                case "WinSystemObj":
                    return "http://cybox.mitre.org/objects#WinSystemObject-2";
                case "PipeObj":
                    return "http://cybox.mitre.org/objects#PipeObject-2";
                case "ttp":
                    return "http://stix.mitre.org/TTP-1";
                case "UnixUserAccountObj":
                    return "http://cybox.mitre.org/objects#UnixUserAccountObject-2";
                case "WinMemoryPageRegionObj":
                    return "http://cybox.mitre.org/objects#WinMemoryPageRegionObject-2";
                case "NetworkSubnetObj":
                    return "http://cybox.mitre.org/objects#NetworkSubnetObject-2";
                case "UnixPipeObj":
                    return "http://cybox.mitre.org/objects#UnixPipeObject-2";
                case "WinProcessObj":
                    return "http://cybox.mitre.org/objects#WinProcessObject-2";
                case "ciqAddress":
                    return "http://stix.mitre.org/extensions/Address#CIQAddress3.0-1";
                case "SemaphoreObj":
                    return "http://cybox.mitre.org/objects#SemaphoreObject-2";
                case "cvrfVuln":
                    return "http://stix.mitre.org/extensions/Vulnerability#CVRF-1";
                case "WinEventObj":
                    return "http://cybox.mitre.org/objects#WinEventObject-2";
                case "EmailMessageObj":
                    return "http://cybox.mitre.org/objects#EmailMessageObject-2";
                case "WinWaitableTimerObj":
                    return "http://cybox.mitre.org/objects#WinWaitableTimerObject-2";
                case "WhoisObj":
                    return "http://cybox.mitre.org/objects#WhoisObject-2";
                case "ProcessObj":
                    return "http://cybox.mitre.org/objects#ProcessObject-2";
                case "capec":
                    return "http://capec.mitre.org/capec-2";
                case "capecInstance":
                    return "http://stix.mitre.org/extensions/AP#CAPEC2.6-1";
                case "genericTM":
                    return "http://stix.mitre.org/extensions/TestMechanism#Generic-1";
                case "oval":
                    return "http://oval.mitre.org/XMLSchema/oval-common-5";
                case "WinSemaphoreObj":
                    return "http://cybox.mitre.org/objects#WinSemaphoreObject-2";
                case "NetworkRouteEntryObj":
                    return "http://cybox.mitre.org/objects#NetworkRouteEntryObject-2";
                case "stixVocabs":
                    return "http://stix.mitre.org/default_vocabularies-1";
                case "VolumeObj":
                    return "http://cybox.mitre.org/objects#VolumeObject-2";
                case "DNSQueryObj":
                    return "http://cybox.mitre.org/objects#DNSQueryObject-2";
                case "ds":
                    return "http://www.w3.org/2000/09/xmldsig#";
                case "WinUserAccountObj":
                    return "http://cybox.mitre.org/objects#WinUserAccountObject-2";
                case "campaign":
                    return "http://stix.mitre.org/Campaign-1";
                case "snortTM":
                    return "http://stix.mitre.org/extensions/TestMechanism#Snort-1";
                case "xs":
                    return "http://www.w3.org/2001/XMLSchema";
                case "PortObj":
                    return "http://cybox.mitre.org/objects#PortObject-2";
                case "UnixVolumeObj":
                    return "http://cybox.mitre.org/objects#UnixVolumeObject-2";
                case "maec":
                    return "http://maec.mitre.org/XMLSchema/maec-package-2";
                case "NetworkSocketObj":
                    return "http://cybox.mitre.org/objects#NetworkSocketObject-2";
                case "GUIDialogBoxObj":
                    return "http://cybox.mitre.org/objects#GUIDialogboxObject-2";
                case "LibraryObj":
                    return "http://cybox.mitre.org/objects#LibraryObject-2";
                case "WinThreadObj":
                    return "http://cybox.mitre.org/objects#WinThreadObject-2";
                case "cvrf-common":
                    return "http://www.icasi.org/CVRF/schema/common/1.1";
                case "NetworkConnectionObj":
                    return "http://cybox.mitre.org/objects#NetworkConnectionObject-2";
                case "ovalTM":
                    return "http://stix.mitre.org/extensions/TestMechanism#OVAL5.10-1";
                case "tlpMarking":
                    return "http://data-marking.mitre.org/extensions/MarkingStructure#TLP-1";
                case "WinKernelHookObj":
                    return "http://cybox.mitre.org/objects#WinKernelHookObject-2";
                case "WinComputerAccountObj":
                    return "http://cybox.mitre.org/objects#WinComputerAccountObject-2";
                case "dc":
                    return "http://purl.org/dc/elements/1.1/";
                case "LinuxPackageObj":
                    return "http://cybox.mitre.org/objects#LinuxPackageObject-2";
                case "sch":
                    return "http://purl.oclc.org/dsdl/schematron";
                case "yaraTM":
                    return "http://stix.mitre.org/extensions/TestMechanism#YARA-1";
                case "prod":
                    return "http://www.icasi.org/CVRF/schema/prod/1.1";
                case "DNSCacheObj":
                    return "http://cybox.mitre.org/objects#DNSCacheObject-2";
                case "UnixFileObj":
                    return "http://cybox.mitre.org/objects#UnixFileObject-2";
                case "NetFlowObj":
                    return "http://cybox.mitre.org/objects#NetworkFlowObject-2";
                case "cyboxVocabs":
                    return "http://cybox.mitre.org/default_vocabularies-2";
                case "openiocTM":
                    return "http://stix.mitre.org/extensions/TestMechanism#OpenIOC2010-1";
                case "WinRegistryKeyObj":
                    return "http://cybox.mitre.org/objects#WinRegistryKeyObject-2";
                case "ProductObj":
                    return "http://cybox.mitre.org/objects#ProductObject-2";
                case "WinHandleObj":
                    return "http://cybox.mitre.org/objects#WinHandleObject-2";
                case "oval-var":
                    return "http://oval.mitre.org/XMLSchema/oval-variables-5";
                case "a":
                    return "urn:oasis:names:tc:ciq:xal:3";
                case "cvssv2":
                    return "http://scap.nist.gov/schema/cvss-v2/1.0";
                case "WinEventLogObj":
                    return "http://cybox.mitre.org/objects#WinEventLogObject-2";
                case "vuln":
                    return "http://www.icasi.org/CVRF/schema/vuln/1.1";
                case "simpleMarking":
                    return "http://data-marking.mitre.org/extensions/MarkingStructure#Simple-1";
                case "APIObj":
                    return "http://cybox.mitre.org/objects#APIObject-2";
                case "genericStructuredCOA":
                    return "http://stix.mitre.org/extensions/StructuredCOA#Generic-1";
                case "ct":
                    return "urn:oasis:names:tc:ciq:ct:3";
                case "SystemObj":
                    return "http://cybox.mitre.org/objects#SystemObject-2";
                case "DNSRecordObj":
                    return "http://cybox.mitre.org/objects#DNSRecordObject-2";
                case "stixCommon":
                    return "http://stix.mitre.org/common-1";
                case "WinServiceObj":
                    return "http://cybox.mitre.org/objects#WinServiceObject-2";
                case "cyboxCommon":
                    return "http://cybox.mitre.org/common-2";
                case "cpe":
                    return "http://cpe.mitre.org/language/2.0";
                case "FileObj":
                    return "http://cybox.mitre.org/objects#FileObject-2";
                case "GUIWindowObj":
                    return "http://cybox.mitre.org/objects#GUIWindowObject-2";
                case "WinPrefetchObj":
                    return "http://cybox.mitre.org/objects#WinPrefetchObject-2";
                case "WinKernelObj":
                    return "http://cybox.mitre.org/objects#WinKernelObject-2";
                case "stix":
                    return "http://stix.mitre.org/stix-1";
                case "cybox":
                    return "http://cybox.mitre.org/cybox-2";
                case "indicator":
                    return "http://stix.mitre.org/Indicator-2";
                case "marking":
                    return "http://data-marking.mitre.org/Marking-1";
                case "URIObj":
                    return "http://cybox.mitre.org/objects#URIObject-2";
                case "ta":
                    return "http://stix.mitre.org/ThreatActor-1";
                case "MemoryObj":
                    return "http://cybox.mitre.org/objects#MemoryObject-2";
                case "WinTaskObj":
                    return "http://cybox.mitre.org/objects#WinTaskObject-2";
                case "SocketAddressObj":
                    return "http://cybox.mitre.org/objects#SocketAddressObject-1";
                case "WinMutexObj":
                    return "http://cybox.mitre.org/objects#WinMutexObject-2";
                case "et":
                    return "http://stix.mitre.org/ExploitTarget-1";
                case "WinExecutableFileObj":
                    return "http://cybox.mitre.org/objects#WinExecutableFileObject-2";
                case "WinNetworkShareObj":
                    return "http://cybox.mitre.org/objects#WinNetworkShareObject-2";
                case "LinkObj":
                    return "http://cybox.mitre.org/objects#LinkObject-1";
                case "NetworkRouteObj":
                    return "http://cybox.mitre.org/objects#NetworkRouteObject-2";
                case "xnl":
                    return "urn:oasis:names:tc:ciq:xnl:3";
                case "X509CertificateObj":
                    return "http://cybox.mitre.org/objects#X509CertificateObject-2";
                case "maecInstance":
                    return "http://stix.mitre.org/extensions/Malware#MAEC4.0-1";
                case "UnixNetworkRouteEntryObj":
                    return "http://cybox.mitre.org/objects#UnixNetworkRouteEntryObject-2";
                case "oval-def":
                    return "http://oval.mitre.org/XMLSchema/oval-definitions-5";
                case "ciqIdentity":
                    return "http://stix.mitre.org/extensions/Identity#CIQIdentity3.0-1";
                case "AccountObj":
                    return "http://cybox.mitre.org/objects#AccountObject-2";
                case "xlink":
                    return "http://www.w3.org/1999/xlink";
                default:
                    return null;
            }
        }

        protected string getSchemaPath(string name_space)
        {
            string schema_path;
            switch (name_space)
            {
                case "campaign":
                case "campaign.xsd":
                    schema_path = "~/schema/stix_v1.0.1/campaign.xsd";
                    break;
                case "coa":
                case "course_of_action.xsd":
                    schema_path = "~/schema/stix_v1.0.1/course_of_action.xsd";
                    break;
                case "marking":
                case "data_marking.xsd":
                    schema_path = "~/schema/stix_v1.0.1/data_marking.xsd";
                    break;
                case "et":
                case "exploit_target.xsd":
                    schema_path = "~/schema/stix_v1.0.1/exploit_target.xsd";
                    break;
                case "incident":
                case "incident.xsd":
                    schema_path = "~/schema/stix_v1.0.1/incident.xsd";
                    break;
                case "indicator":
                case "indicator.xsd":
                    schema_path = "~/schema/stix_v1.0.1/indicator.xsd";
                    break;
                case "stixCommon":
                case "stix_common.xsd":
                    schema_path = "~/schema/stix_v1.0.1/stix_common.xsd";
                    break;
                case "stix":
                case "stix_core.xsd":
                    schema_path = "~/schema/stix_v1.0.1/stix_core.xsd";
                    break;
                // \schema\stix_v1.0.1\stix_default_vocabularies.xsd not implemented
                case "ta":
                case "threat_actor.xsd":
                    schema_path = "~/schema/stix_v1.0.1/threat_actor.xsd";
                    break;
                case "ttp":
                case "ttp.xsd":
                    schema_path = "~/schema/stix_v1.0.1/ttp.xsd";
                    break;
                // \schema\stix_v1.0.1\extensions\*\*.xsd not implemented
                case "cyboxCommon":
                case "cybox_common.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/cybox_common.xsd";
                    break;
                case "cybox":
                case "cybox_core.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/cybox_core.xsd";
                    break;
                // \schema\cybox_v2.0.1\cybox_default_vocabularies.xsd not implemented
                // \schema\cybox_v2.0.1\extensions\platform\cpe2.3.xsd not implemented
                case "AccountObj":
                case "Account_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Account_Object.xsd";
                    break;
                case "AddressObj":
                case "Address_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Address_Object.xsd";
                    break;
                case "APIObj":
                case "API_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/API_Object.xsd";
                    break;
                case "ArtifactObj":
                case "Artifact_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Artifact_Object.xsd";
                    break;
                case "CodeObj":
                case "Code_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Code_Object.xsd";
                    break;
                case "CustomObj":
                case "Custom_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Custom_Object.xsd";
                    break;
                case "DeviceObj":
                case "Device_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Device_Object.xsd";
                    break;
                case "DiskObj":
                case "Disk_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Disk_Object.xsd";
                    break;
                case "DiskPartitionObj":
                case "Disk_Partition_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Disk_Partition_Object.xsd";
                    break;
                case "DNSCacheObj":
                case "DNS_Cache_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/DNS_Cache_Object.xsd";
                    break;
                case "DNSQueryObj":
                case "DNS_Query_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/DNS_Query_Object.xsd";
                    break;
                case "DNSRecordObj":
                case "DNS_Record_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/DNS_Record_Object.xsd";
                    break;
                case "EmailMessageObj":
                case "Email_Message_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Email_Message_Object.xsd";
                    break;
                case "FileObj":
                case "File_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/File_Object.xsd";
                    break;
                case "GUIDialogBoxObj":
                case "GUI_Dialogbox_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/GUI_Dialogbox_Object.xsd";
                    break;
                case "GUIObj":
                case "GUI_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/GUI_Object.xsd";
                    break;
                case "GUIWindowObj":
                case "GUI_Window_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/GUI_Window_Object.xsd";
                    break;
                case "HTTPSessionObj":
                case "HTTP_Session_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/HTTP_Session_Object.xsd";
                    break;
                case "LibraryObj":
                case "Library_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Library_Object.xsd";
                    break;
                case "LinkObj":
                case "Link_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Link_Object.xsd";
                    break;
                case "LinuxPackageObj":
                case "Linux_Package_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Linux_Package_Object.xsd";
                    break;
                case "MemoryObj":
                case "Memory_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Memory_Object.xsd";
                    break;
                case "MutexObj":
                case "Mutex_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Mutex_Object.xsd";
                    break;
                case "NetworkConnectionObj":
                case "Network_Connection_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Connection_Object.xsd";
                    break;
                case "NetFlowObj":
                case "Network_Flow_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Flow_Object.xsd";
                    break;
                case "PacketObj":
                case "Network_Packet_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Packet_Object.xsd";
                    break;
                case "NetworkRouteEntryObj":
                case "Network_Route_Entry_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Route_Entry_Object.xsd";
                    break;
                case "NetworkRouteObj":
                case "Network_Route_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Route_Object.xsd";
                    break;
                case "NetworkSocketObj":
                case "Network_Socket_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Socket_Object.xsd";
                    break;
                case "NetworkSubnetObj":
                case "Network_Subnet_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Network_Subnet_Object.xsd";
                    break;
                case "PDFFileObj":
                case "PDF_File_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/PDF_File_Object.xsd";
                    break;
                case "PipeObj":
                case "Pipe_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Pipe_Object.xsd";
                    break;
                case "PortObj":
                case "Port_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Port_Object.xsd";
                    break;
                case "ProcessObj":
                case "Process_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Process_Object.xsd";
                    break;
                case "ProductObj":
                case "Product_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Product_Object.xsd";
                    break;
                case "SemaphoreObj":
                case "Semaphore_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Semaphore_Object.xsd";
                    break;
                case "SocketAddressObj":
                case "Socket_Address_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Socket_Address_Object.xsd";
                    break;
                case "SystemObj":
                case "System_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/System_Object.xsd";
                    break;
                case "UnixFileObj":
                case "Unix_File_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Unix_File_Object.xsd";
                    break;
                case "UnixNetworkRouteEntryObj":
                case "Unix_Network_Route_Entry_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Unix_Network_Route_Entry_Object.xsd";
                    break;
                case "UnixPipeObj":
                case "Unix_Pipe_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Unix_Pipe_Object.xsd";
                    break;
                case "UnixProcessObj":
                case "Unix_Process_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Unix_Process_Object.xsd";
                    break;
                case "UnixUserAccountObj":
                case "Unix_User_Account_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Unix_User_Account_Object.xsd";
                    break;
                case "UnixVolumeObj":
                case "Unix_Volume_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Unix_Volume_Object.xsd";
                    break;
                case "URIObj":
                case "URI_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/URI_Object.xsd";
                    break;
                case "UserAccountObj":
                case "User_Account_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/User_Account_Object.xsd";
                    break;
                case "UserSessionObj":
                case "User_Session_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/User_Session_Object.xsd";
                    break;
                case "VolumeObj":
                case "Volume_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Volume_Object.xsd";
                    break;
                case "WhoisObj":
                case "Whois_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Whois_Object.xsd";
                    break;
                case "WinComputerAccountObj":
                case "Win_Computer_Account_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Computer_Account_Object.xsd";
                    break;
                case "WinCriticalSectionObj":
                case "Win_Critical_Section_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Critical_Section_Object.xsd";
                    break;
                case "WinDriverObj":
                case "Win_Driver_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Driver_Object.xsd";
                    break;
                case "WinEventLogObj":
                case "Win_Event_Log_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Event_Log_Object.xsd";
                    break;
                case "WinEventObj":
                case "Win_Event_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Event_Object.xsd";
                    break;
                case "WinExecutableFileObj":
                case "Win_Executable_File_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Executable_File_Object.xsd";
                    break;
                case "WinFileObj":
                case "Win_File_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_File_Object.xsd";
                    break;
                case "WinHandleObj":
                case "Win_Handle_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Handle_Object.xsd";
                    break;
                case "WinKernelHookObj":
                case "Win_Kernel_Hook_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Kernel_Hook_Object.xsd";
                    break;
                case "WinKernelObj":
                case "Win_Kernel_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Kernel_Object.xsd";
                    break;
                case "WinMailslotObj":
                case "Win_Mailslot_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Mailslot_Object.xsd";
                    break;
                case "WinMemoryPageRegionObj":
                case "Win_Memory_Page_Region_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Memory_Page_Region_Object.xsd";
                    break;
                case "WinMutexObj":
                case "Win_Mutex_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Mutex_Object.xsd";
                    break;
                case "WinNetworkRouteEntryObj":
                case "Win_Network_Route_Entry_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Network_Route_Entry_Object.xsd";
                    break;
                case "WinNetworkShareObj":
                case "Win_Network_Share_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Network_Share_Object.xsd";
                    break;
                case "WinPipeObj":
                case "Win_Pipe_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Pipe_Object.xsd";
                    break;
                case "WinPrefetchObj":
                case "Win_Prefetch_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Prefetch_Object.xsd";
                    break;
                case "WinProcessObj":
                case "Win_Process_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Process_Object.xsd";
                    break;
                case "WinRegistryKeyObj":
                case "Win_Registry_Key_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Registry_Key_Object.xsd";
                    break;
                case "WinSemaphoreObj":
                case "Win_Semaphore_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Semaphore_Object.xsd";
                    break;
                case "WinServiceObj":
                case "Win_Service_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Service_Object.xsd";
                    break;
                case "WinSystemObj":
                case "Win_System_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_System_Object.xsd";
                    break;
                case "WinSystemRestoreObj":
                case "Win_System_Restore_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_System_Restore_Object.xsd";
                    break;
                case "WinTaskObj":
                case "Win_Task_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Task_Object.xsd";
                    break;
                case "WinThreadObj":
                case "Win_Thread_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Thread_Object.xsd";
                    break;
                case "WinUserAccountObj":
                case "Win_User_Account_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_User_Account_Object.xsd";
                    break;
                case "WinVolumeObj":
                case "Win_Volume_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Volume_Object.xsd";
                    break;
                case "WinWaitableTimerObj":
                case "Win_Waitable_Timer_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/Win_Waitable_Timer_Object.xsd";
                    break;
                case "X509CertificateObj":
                case "X509_Certificate_Object.xsd":
                    schema_path = "~/schema/cybox_v2.0.1/objects/X509_Certificate_Object.xsd";
                    break;
                default:
                    return null;
            }
            return schema_path;
        }
    }

    public class ChildNode : LastUserMod
    {
        string nodeName;
        string xpath;
        int minOccur;
        int maxOccur;

        public string NodeName
        {
            get { return nodeName; }
            set { nodeName = value; }
        }

        public string Xpath
        {
            get { return xpath; }
            set { xpath = value; }
        }

        public int MinOccur
        {
            get { return minOccur; }
            set { minOccur = value; }
        }

        public int MaxOccur
        {
            get { return maxOccur; }
            set { maxOccur = value; }
        }
    }

    public class Value : LastUserMod
    {
        string val;
        string datatype;

        public string Val
        {
            get { return val; }
            set { val = value; }
        }

        public string Datatype
        {
            get { return datatype; }
            set { datatype = value; }
        }
    }

    public class Attribute : LastUserMod
    {
        string name;
        string val;
        string datatype;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Val
        {
            get { return val; }
            set { val = value; }
        }

        public string Datatype
        {
            get { return datatype; }
            set { datatype = value; }
        }
    }

}