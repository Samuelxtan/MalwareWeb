using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.SqlClient;
using System.Data;
using System.Text;
using System.IO;
using System.Security.Cryptography;
using System.Configuration;
using System.Net;

namespace Malware_FYPJ.Entity
{
    public class Sample
    {
        // Variables
        private Guid sampleId;
        private string sampleName;
        private DateTime sampleInsertDate;
        private Guid userId;
        private string md5;
        private string sha1;
        private string sha512;
        private string filetype;

        // Encapsulated methods
        public Guid SampleId
        {
            get { return sampleId; }
            set { sampleId = value; }
        }

        public string SampleName
        {
            get { return sampleName; }
            set { sampleName = value; }
        }

        public DateTime SampleInsertDate
        {
            get { return sampleInsertDate; }
            set { sampleInsertDate = value; }
        }

        public string Filetype
        {
            get { return filetype; }
            set { filetype = value; }
        }

        public Guid UserId
        {
            get { return userId; }
            set { userId = value; }
        }

        public string Md5
        {
            get { return md5; }
            set { md5 = value; }
        }

        public string Sha1
        {
            get { return sha1; }
            set { sha1 = value; }
        }

        public string Sha512
        {
            get { return sha512; }
            set { sha512 = value; }
        }

        // Constructors
        public Sample()
        {
        }

        // Generate Guid
        public static Guid generateGuid()
        {
            
            return Guid.NewGuid();
        }

        // Generate MD5 hash
        public static string generateMD5(byte[] content)
        {
            MD5 md5Hash = MD5.Create();
            byte[] data = md5Hash.ComputeHash(content);

            // Create a new Stringbuilder to collect the bytes and create a string.
            StringBuilder sBuilder = new StringBuilder();

            // Loop through each byte of the hashed data and format each one as a hexadecimal string. 
            for (int i = 0; i < data.Length; i++)
            {
                sBuilder.Append(data[i].ToString("x2"));
            }

            // Return the hexadecimal string. 
            return sBuilder.ToString();
        }

        // Generate SHA1 hash
        public static string generateSHA1(byte[] content)
        {
            SHA1Managed sha1 = new SHA1Managed();
            byte[] hash = sha1.ComputeHash(content);
            string hex = BitConverter.ToString(hash).Replace("-", "");
            return hex;
        }

        // Generate SHA512 hash
        public static string generateSHA512(byte[] content)
        {
            SHA512Managed sha512 = new SHA512Managed();
            byte[] hash = sha512.ComputeHash(content);
            string hex = BitConverter.ToString(hash).Replace("-", "");
            return hex;
        }

        // Check if file exist in DB using hash
        public static bool checkHashExistence(string md5, string sha1)
        {
            int count = 0;
            string query = "SELECT COUNT(*) FROM [sample] WHERE [MD5] = @md5 OR [SHA1] = @sha1";
            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["malwrConnectionString"].ToString());
            SqlCommand cmd = new SqlCommand(query, con);
            con.Open();
            cmd.Parameters.AddWithValue("@md5", md5);
            cmd.Parameters.AddWithValue("@sha1", sha1);
            SqlDataReader reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                count = reader.GetInt32(0);
                con.Close();
                if (count == 0)
                {
                    return false;       // hash does not exist
                }
                else
                {
                    return true;        // hash exist
                }
            }
            return false;
        }

        // Convert byte array to file
        public static string convertBytesToFile(string md5, string file_name, byte[] file_content)
        {
            string[] file_name_parts = file_name.Split('.');
            string temp_file_path = HttpContext.Current.Server.MapPath("/Upload/") + md5 + "." + file_name_parts[file_name_parts.Length - 1];
            File.WriteAllBytes(temp_file_path, file_content);
            return temp_file_path;
        }

        // Save new sample to DB
        public static bool insertSample(Sample s)
        {
            string query = "INSERT INTO sample VALUES (@SampleId, @SampleName, @SampleInsertDate, @UserId, @MD5, @SHA1, @SHA512 ,@filetype, @Download)";
            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["malwrConnectionString"].ToString());
            SqlCommand cmd = new SqlCommand(query, con);
            con.Open();
            cmd.Parameters.AddWithValue("@SampleId", s.SampleId);
            cmd.Parameters.AddWithValue("@SampleName", s.SampleName);
            cmd.Parameters.AddWithValue("@SampleInsertDate", s.SampleInsertDate);
            cmd.Parameters.AddWithValue("@UserId", s.UserId);
            cmd.Parameters.AddWithValue("@MD5", s.Md5);
            cmd.Parameters.AddWithValue("@SHA1", s.Sha1);
            cmd.Parameters.AddWithValue("@SHA512", s.Sha512);
            cmd.Parameters.AddWithValue("@filetype", s.filetype);
            cmd.Parameters.AddWithValue("@Download", "0");

            try
            {
                cmd.ExecuteNonQuery();
            }

            catch (SqlException)
            {
                return false;
            }
            con.Close();

            return true;
        }

        // Save sample to StorageVM
        public static bool saveFileToStorageVM(string file_path)
        {
            string ftpServerIP = "172.20.180.19";
            string ftpUsername = "storagevm";
            string ftpPassword = "password";

            FileInfo file = new FileInfo(file_path);

            FtpWebRequest request;
            string uri = "ftp://" + ftpServerIP + "//samples/" + file.Name;
            request = (FtpWebRequest)FtpWebRequest.Create(new Uri(uri));
            request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);
            request.KeepAlive = false;
            request.UseBinary = true;
            request.ContentLength = file.Length;
            request.Method = WebRequestMethods.Ftp.UploadFile;

            int bufferLength = 16 * 1024;
            byte[] buffer = new byte[bufferLength];

            FileStream fileStream = file.OpenRead();

            try
            {
                Stream stream = request.GetRequestStream();
                int len = 0;

                while ((len = fileStream.Read(buffer, 0, bufferLength)) != 0)
                {
                    stream.Write(buffer, 0, len);
                }

                stream.Close();
                fileStream.Close();
            }
            catch (Exception e)
            {
                e.ToString();
                return false;           // ftp failed
            }
            return true;                // ftp succeeded
        }
        //save file to EngineVM
        public static bool saveFileToEngineVM(string file_path)
        {
            string ftpServerIP = "172.20.180.14";
            string ftpUsername = "user";
            string ftpPassword = "password";

            FileInfo file = new FileInfo(file_path);

            FtpWebRequest request;
            string uri = "ftp://" + ftpServerIP + "//home/user/Desktop/analysis/samples/" + file.Name;
            request = (FtpWebRequest)FtpWebRequest.Create(new Uri(uri));
            request.Credentials = new NetworkCredential(ftpUsername, ftpPassword);
            request.KeepAlive = false;
            request.UseBinary = true;
            request.ContentLength = file.Length;
            request.Method = WebRequestMethods.Ftp.UploadFile;

            int bufferLength = 16 * 1024;
            byte[] buffer = new byte[bufferLength];

            FileStream fileStream = file.OpenRead();

            try
            {
                Stream stream = request.GetRequestStream();
                int len = 0;

                while ((len = fileStream.Read(buffer, 0, bufferLength)) != 0)
                {
                    stream.Write(buffer, 0, len);
                }

                stream.Close();
                fileStream.Close();
            }
            catch (Exception e)
            {
                e.ToString();
                return false;           // ftp failed
            }
            return true;                // ftp succeeded
        }
    }
}